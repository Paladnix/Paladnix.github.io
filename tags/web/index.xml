<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/tags/web/</link>
    <description>Recent content in Web on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 21:48:42 +0000</lastBuildDate><atom:link href="https://Paladnix.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>apache2 配置多端口服务</title>
      <link>https://Paladnix.github.io/posts/web/apache2/</link>
      <pubDate>Mon, 18 Jun 2018 21:48:42 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/apache2/</guid>
      <description>多端口多服务配置 # 个人服务器和一些低访问量的服务，使用apache2比较方便。 安装完以后打开默认的页面会看到有个介绍：
/etc/apache2/ |-- apache2.conf | `-- ports.conf |-- mods-enabled | |-- *.load | `-- *.conf |-- conf-enabled | `-- *.conf |-- sites-enabled | `-- *.conf 这就是apache2的基本配置文件
1. apache.conf # 这个文件基本不用动，是apache的总配置文件。我只修改一项：
&amp;lt;Directory /var/www/&amp;gt; Options Indexes FollowSymLinks AllowOverride all # default is None, change to all. Require all granted &amp;lt;/Directory&amp;gt; 2. ports.conf # 这个文件用来添加监听的端口：
# If you just change the port or add more ports here, you will likely also # have to change the VirtualHost statement in # /etc/apache2/sites-enabled/000-default.</description>
    </item>
    
    <item>
      <title>webpack</title>
      <link>https://Paladnix.github.io/posts/web/webpack/</link>
      <pubDate>Tue, 21 Nov 2017 00:21:50 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/webpack/</guid>
      <description></description>
    </item>
    
    <item>
      <title>less 笔记</title>
      <link>https://Paladnix.github.io/posts/web/less/</link>
      <pubDate>Mon, 20 Nov 2017 12:36:39 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/less/</guid>
      <description>作为CSS的一种扩展语言，使得CSS开发更便捷。
变量 # less中的变量使用@开头。
// LESS @color: #4D926F; #header { color: @color; } h2 { color: @color; } /* 生成的 CSS */ #header { color: #4D926F; } h2 { color: #4D926F; } 甚至可以用变量名定义为变量:
@fnord: &amp;#34;I am fnord.&amp;#34;; @var: &amp;#39;fnord&amp;#39;; content: @@var; --&amp;gt; content: &amp;#34;I am fnord.&amp;#34;; 请注意 LESS 中的变量为完全的 ‘常量’ ，所以只能定义一次.
字符串嵌入 # 变量可以用类似ruby和php的方式嵌入到字符串中，像@{name}这样的结构:
@base-url: &amp;quot;http://assets.fnord.com&amp;quot;; background-image: url(&amp;quot;@{base-url}/images/bg.png&amp;quot;);
作用域 # LESS 中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合模块，如果没找到的话会去父级作用域中查找，直到找到为止.
引入文件 # 你可以在main文件中通过下面的形势引入 .less 文件, .less 后缀可带可不带:
@import &amp;#34;lib.</description>
    </item>
    
    <item>
      <title>react 设计概念</title>
      <link>https://Paladnix.github.io/posts/web/react-2/</link>
      <pubDate>Sun, 19 Nov 2017 15:12:18 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/react-2/</guid>
      <description>react是一个前端库，着力在创造新的前端渲染的工作模式。 react单个可以做为开发库来单独使用，但是一般我们会将其与其他的相关库一起使用，在使用的时候，基本的react概念是不变的，只是在某些环节发生一些变化。
react 组件的生命周期 # 对于一个react的组件，其生命周期决定了其思维方式。 一个组件什么时候产生实例，在什么时候调用什么函数，决定了这个组件在什么时候做什么动作。
react严格的定义了组件的生命周期，分别是装载过程，更新过程，卸载过程。我们重点是要清楚，在装载和更新的过程中，react组件都要做哪些动作。
装载过程 # 当组件第一次被装载的时候，一次被调用的分别是：
constructor componentWillMount render componentDidMount 这里我们使用的是ES6语法的方式来创建组建，所以有一些老的函数就没有被用到，也就不用再提了。
contructor # 并不是每个组件都需要构造函数，当有构造函数的时候，一定要先执行父类的构造函数。
class Sample extends React.Component{ contructor(props){ super(props); this.state = {foo: &amp;#39;bar&amp;#39;}; this.onClickSubmitButton = this.onClickSubmitButton.bind(this); // this.onClickSubmitButton = ::this.onClickSubmitButton; } } 在构造函数中，我们要：
给内部数据初始化，也就是赋值state。 将函数绑定this，否则内部使用的数据会是错的，绑定以后使用的数据就是本组件中的数据。 componentWillMount &amp;amp; componentDidMount # 这是一组函数，分别在render之前和之后调用。 WillComponent这个函数其实有点多余，因为所有在这里做的事情我们都可以在构造函数中做，因此基本不会用到这个函数。 DidMount 就是在render函数过后调用，此时页面已经渲染出来。 在这个函数的执行时间上，还是比较有文章的。
举个例子，组件A有三个子组件B，B都有实现这个函数，在A的render函数中，会执行B的render函数，但是当一个B的render函数执行完后，并不立即执行这个B的DidMount函数，而是等所有的B的render函数被调用完毕后才一起调用。当然也是按顺序的。 由于此时已经渲染出来，所以我们也就可以获得DOM树上的节点。因此我们可以在这时候请求服务器去填充数据。这在我们使用其他的一些前端库的时候比较方便。例如在使用jQuery的时候，jQuery只能对已经存在的元素进行操作，所以此时正是调用jquery的时候。
render # 但凡React组件都要实现这个函数，因为这个函数在Component中没有默认的实现。
render函数并不直接操作渲染，而是返回一个JSX语法的描述。最终的渲染动作由react来做。如过没有什么要渲染就可以返回一个null或者false。
render应该是一个纯函数，只接受state和props并产生返回值，没有其他任何的副作用。
更新过程 # 要实现交互，就需要更新：
componentWillReceiveProps shouldComponentUpdate componentWillUpdate render componentDidUpdate 在父组件发生Update调用render函数的时候，子组件就会经历更新过程。
componentWillReceiveProps # 这个函数在使用this.setState更改数据的时候不会被调用。因为这个函数根据新props的值来计算是不是要更新内部状态state。更新内部状态使用setState，因此不会产生循环调用。 这个函数接受一个参数， 新传进来的nextProps。</description>
    </item>
    
    <item>
      <title>mobx - redux的优秀替代品</title>
      <link>https://Paladnix.github.io/posts/web/mobx/</link>
      <pubDate>Sat, 18 Nov 2017 14:29:49 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/mobx/</guid>
      <description>在使用react做大型开发的时候，我们习惯使用redux来做数据管控。但是redux实在是太过繁琐，流程很长，不利于快速开发。 mobx是redux作者非常推荐的一个替代产品。
基本概念 # 与redux的长流程，严管控不同，mobx采用一种更直接的方式，和更自动化的方式管理应用的数据。
状态驱动页面更新 # 应用的state也就是其中的数据，就是应用此时所在的状态，状态的改变驱动页面的改变，这是共识，问题就是怎么设计使状态的改变驱动页面更新。
在mobx中，数据将被监视，当数据发生变化的时候，mobx会自动的知道哪些部分需要被刷新，而不需要程序员来指明更新什么。
应用的状态分成两种， 一种是数据本身组成的基本状态。还有一种是在数据基础上计算得出的衍生状态。在下面我们会讨论这些。
observable # 对于需要被监视的数据，就将他用注解的方式注明，需要被监视。
import { observable, computed } from &amp;#34;mobx&amp;#34;; class OrderLine { @observable price = 0; @observable amount = 1; @computed get total() { return this.price * this.amount; } } 就这样简单的就将一个变量纳入mobx的观察体系中。 被观察的可以是几乎所有的javascript的数据结构，但是，对于对象，建议一律转成map来观察，因为对象只会观察此时有的字段，对于未来新添加的字段需要手动加入观察， 但是map就可以将添加进来的新key一并纳入观察。
observer # 有了被观察的，就要有观察者， 这里的观察者会是前端的组件。通常来说，每个组件都应该是可以观察自身数据的，响应式的应用。 一个观察者，会在数据发生变化的时候自动更新自己的视图。
import {observer} from &amp;#39;mobx-react&amp;#39;; @observer class TimerView extends React.Component { render() { return (&amp;lt;button onClick={this.onReset.bind(this)}&amp;gt; Seconds passed: {this.props.appState.timer} &amp;lt;/button&amp;gt;); } onReset () { this.</description>
    </item>
    
    <item>
      <title>使用react开发的优秀实践</title>
      <link>https://Paladnix.github.io/posts/web/react-1/</link>
      <pubDate>Wed, 15 Nov 2017 14:10:15 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/react-1/</guid>
      <description>如果想用react开发功能丰富，易于代码管理，易于扩展维护的项目，我们最好使用react的一整个体系。当然你单独使用react的部分也是可以的，写一些简单的应用也非常方便，没有必要把这个体系用上。
这篇文章作为入门的一篇略深一些的介绍，在全面学习之前我们至少要知道我们学的每个部分是做什么，为什么要在这里用这个。所以本文不讲一些代码的细节，而是从整体上把握这个技术栈，帮助你快速理解整个体系。
总结 # 一个比较好的实践是使用: react + redux + router, 来实现复杂的应用。 其中， react 承担了前端渲染控制的功能，redux承担了数据流转的控制功能，router则实现了路由控制的功能。
这三项，基本上可以保证我们做出的项目，结构清晰，易于维护。 在初学这写东西的时候，可能会觉得比较痛苦，因为你需要记住太多的东西和条条框框来开发，这好像限制了你的自由发挥，但是对于一个大型应用来说，或者即便是小应用，没有清晰的结构，就连你自己可能都看不懂自己的代码，后期维护的时候就基本上没有多少好体验了。
真正优秀的作品，都是在严格的限制下完成的，因为人的思维不应该去思考那些复杂的页面组成的逻辑关系，而是在实现自己的业务逻辑和计算算法上，那些结构，按照一个科学的方式来做就好。而react正是提供了这样一个科学的流程和方式。
react # 总的来说，在前端渲染方面，react非常出众， 一般我们将前端渲染的部分交给react来做。 react使用虚拟DOM的方式，来管理渲染。并且将一个页面分成多个组件进行管理，我们一般将组件按功能分开。当页面发生变化的时候，由react来决定哪里需要渲染，哪里不动，react来操纵浏览器的渲染。 与jQuery相比，更进一步， jQuery是将浏览器的一些操作封装出来，提供一组新的调用函数。但是react已经将浏览器的相关接口完全封装，并且屏蔽在react内部，提供了一种更自然和智能的方式来满足我们的需求。我们直接和react打交道，剩余的事情由react去和浏览器做。
react这个框架可以运行在浏览器端，也可以运行在服务器端， 我们称之为Universal渲染，这里的服务器端，就是Nodejs的平台了。我用的基本上都是浏览器端运行。只要将react的脚本发送到浏览器进行执行就可以了。 初的渲染是后端的事情，有了ajax后前端也可以进行渲染了。但是前端渲染会有个问题，就是搜索引擎不友好，因为搜索引擎并不会去跟js代码交互，只会爬取静态页面，所以使用后端渲染十分重要。这关乎你的网站被检索到的可能性。
基本构造 # react的逻辑很简单，一切都是组件。一个页面是由多个组件堆砌而成，每个组件之间互相隔离，仅通过数据交互，而数据交互的接口是固定的。所以对于一个组件内部来说，与外界是完全隔离的。 一个组件包括，样式和数据。数据我们通过请求服务器去获得。 每个组件通过提供一个render函数来返回这个组件，这个render函数只能返回一个元素。如果有多个元素需要被包起来成为一个元素返回。 组件之间可以是嵌套关系，这个和类的概念有点像，在一个类中可以包含另一个类作为自己的成员。也就是方便我们做组件封装，功能划分。
当我们写完一个react应用后，可以通过npm start的方式启动起来，当我们在浏览器访问对应的地址时，默认访问index.js, 所以我们的应用最终在这里组织起来。
ES6 &amp;amp; Javascript &amp;amp; JSX # 在写应用的时候，我们使用JSX 语法来写，JSX以ES6为基础，react提供了JSX解释器。在写完以后，JSX语法的代码会被编译成JS代码，最终在浏览器中运行的是Javascript的代码，关于webpack等工具，我暂时没有去学习，因为react提供了一个创建react应用的脚本，能够一键创建好这些配置文件，所以我就暂时直接使用了。
npm install --global create-react-app
这个命令就可以安装这个脚本，然后我们执行： create-react-app myapp, 就可以创建一个文件夹， 里面已经配置了一个简单的react应用。 然后我们进入这个文件夹，使用npm start就可以启动服务。 start的过程中，代码就会被编译，并打包成webpack中配置的打包形式。
如果此时我们改变代码，这个页面会动态更新。
react 原生的数据控制 # 在react中，数据主要有三个载体，分别是state、prop、context。其中state是组件内部状态数据，prop用于层层传递，context可以跨层传递。
react要实现各个组件独立，并且具有统一的结构，最重要的就是控制数据。在JS这种弱类型的语言中，这一点很好实现，重点就是设计一个接口形式。 react中的组件，都有两个变量，一个是prop， 一个是state。 其中，state是描述组件内部数据的，prop是对外的接口。也就是说，别人传过来的数据，会存在prop中。同时，prop是不可变的，组件自己不能更改prop的值， 只能改变state的值。
这种数据控制的方式，比较原始，从接口统一的角度来看挺好的，也符合基本的思维方式。 但是这种控制方式也存在很多问题，不用去深究这个框架的细节，我们也可以提出很多问题：
每个组件之间的数据冗余问题，很多数据统计的模块，该怎么存储数据？ 复制一份出来？当要更改数据的时候，是不是还要传参给另一个组件通知他改变数据？</description>
    </item>
    
    <item>
      <title>ES 6</title>
      <link>https://Paladnix.github.io/posts/web/es6/</link>
      <pubDate>Sun, 08 Oct 2017 23:33:40 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/es6/</guid>
      <description>历史 # ECMA是个组织，国际标准化组织。 Javascript诞生于1996年，比我略小9个月。由Netscape公司研发，也就是曾经的网景公司。 次年开源交付给ECMA组织进行标准化，力图打造一个国际通用的语言。随后，ECMA发布了国际浏览器脚本语言标准，名称为ECMAScript，实际上就是Javascript的国际标准版。 由于商标等多种原因，名称为ECMAscript，而不是javascript，但我们基本上认为是一个东西。
前者是标准，后者是标准下的实现。
标准是个啥 # 所谓的语言标准，每个语言都有。 在语言不断发展的过程中，会给语言添加一些语法特性，比如以前js是不支持class的，在ES6的标准中就支持啦。
这些标准每年都会变化，不断的有人提案新的语法特性，经由审核实现后发布。
ES6的发布有什么好处？ # 让js真正成为一个可以开发大型应用的语言。 不面向对象的程序设计，在开发逻辑复杂的大型企业级应用的时候非常鸡肋，超高的开发周期和人力投入，复杂的耦合关系，而且极难进行维护。 ES6引入了很多的面向对象的语法，以及函数编程的内容，使得js可以hold住大型开发的复杂度。
但是ES6的class在ES5的时候就是可以实现的，只是语法上很别扭，跟传统的面向对象的语法差异很大，让人学起来很懵逼。
语法细节 # 在细节的内容，推荐一个开源的书，所谓开源的书，就是有电子版的网站可以看，印刷版的要买。
详细参考</description>
    </item>
    
    <item>
      <title>CORS Cross-Origin Resource Sharing</title>
      <link>https://Paladnix.github.io/posts/web/cors/</link>
      <pubDate>Mon, 21 Aug 2017 17:52:41 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/cors/</guid>
      <description>有一种痛，叫做就是想让你多学习一点东西。
这个知识点，来源于一口还没找到源头的大黑锅。而我不能背这个锅，并且要找到一个人来背锅。
Introduction # 在之前的sso文章中，有提到过一个问题，就是cookie的不能跨域的问题。 出于安全考虑，浏览器会限制从脚本内发起的跨域HTTP请求。例如，XMLHttpRequest 和 Fetch 遵循同源策略。因此，使用 XMLHttpRequest或 Fetch 的Web应用程序只能将HTTP请求发送到其自己的域。为了改进Web应用程序，开发人员要求浏览器厂商允许跨域请求。
针对跨域的解决方案有很多，比如：flush、JSONP、ifame、xhr2等，但是都有很多弊端，我觉得CORS比较有前途。
这个解决方案已经被几乎所有的主流的浏览器支持了。浏览器内置了这种解决方案，所以对于前端的工程师来说就是透明的，当前端使用ajax发起一个跨域请求的时候，浏览器自动使用这个方案来处理。但是这个方案需要浏览器和服务器共同支持才可以。
今天主要的使用是依靠XMLHttpRequest来实现。这是一个js的对象，负责与服务端进行动态数据交互。
发起一个XMLHttpRequest请求 # 原生的请求形式。
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; //XmlHttpRequest对象 function createXmlHttpRequest(){ if(window.ActiveXObject){ //如果是IE浏览器 return new ActiveXObject(&amp;#34;Microsoft.XMLHTTP&amp;#34;); }else if(window.XMLHttpRequest){ //非IE浏览器 return new XMLHttpRequest(); } } // 调用getFile方法 function getFile() { var img_Container = document.getElementById(&amp;#34;img_Div&amp;#34;); var xhr = createXmlHttpRequest(); xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;http://oss.youkouyang.com/1.jpg&amp;#39;, true); xhr.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;image/jpeg&amp;#39;); xhr.responseType = &amp;#34;blob&amp;#34;; xhr.onload = function() { if (this.status == 200) { var blob = this.response; var img = document.</description>
    </item>
    
    <item>
      <title>tomcat Server.xml及其启动顺序</title>
      <link>https://Paladnix.github.io/posts/web/tomcatserver/</link>
      <pubDate>Wed, 16 Aug 2017 15:25:20 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/tomcatserver/</guid>
      <description>欲仙又欲死。阿里巴巴真是一朵大奇葩。 一个写死的回调地址就能浪费我两天的时间去搞，还没有搞定。此坑绵绵无绝期。 一个sso的回调地址，写死的，要强行将应用部署到ROOT里中去。
在tomcat中有一个配置文件经常被用到，conf/server.xml。这个配置文件描述了如何启动tomcat server。 tomcat是servlet的容器，也就是能够运行servlet的一个程序。作为一个http服务的程序，可以监听端口，处理请求等。
配置文件结构 # &amp;lt;Server&amp;gt; &amp;lt;Listener /&amp;gt; &amp;lt;GlobaNamingResources&amp;gt; &amp;lt;/GlobaNamingResources &amp;lt;Service&amp;gt; &amp;lt;Connector /&amp;gt; &amp;lt;Engine&amp;gt; &amp;lt;Logger /&amp;gt; &amp;lt;Realm /&amp;gt; &amp;lt;host&amp;gt; &amp;lt;Logger /&amp;gt; &amp;lt;Context /&amp;gt; &amp;lt;/host&amp;gt; &amp;lt;/Engine&amp;gt; &amp;lt;/Service&amp;gt; &amp;lt;/Server&amp;gt; 对我们来说，内层的Service才是有操作意义的部分。主要的部分简介如下：
元素 说明 service 提供服务的主体，默认的名字是Catalina Connector 客户端与服务端之间的连接，包括端口，协议版本，超时时间，等。 Engine 请求的处理机，接收和处理Connector的请求， 与host的联系比较大 Context 表示一个应用 host 表示一个虚拟主机 Tomcat Server处理一个http请求的过程 # 假设来自客户的请求为：http://localhost:8080/wsota/wsota_index.jsp
在这里有一幅图我觉得非常清晰的说明了这个过程，但是其本身跟这个毫无关系。
请求被发送到本机端口8080，被在那里侦听的Coyote HTTP/1.1 Connector获得 Connector把该请求交给它所在的Service的Engine来处理，并等待来自Engine的回应 Engine获得请求localhost/wsota/wsota_index.jsp，匹配它所拥有的所有虚拟主机Host Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机） localhost Host获得请求/wsota/wsota_index.jsp，匹配它所拥有的所有Context Host匹配到路径为/wsota的Context（如果匹配不到就把该请求交给路径名为&amp;quot;&amp;ldquo;的Context去处理） path=&amp;quot;/wsota&amp;quot;的Context获得请求/wsota_index.jsp，在它的mapping table中寻找对应的servlet Context匹配到URL PATTERN为.jsp的servlet，对应于JspServlet类 构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法 Context把执行完了之后的HttpServletResponse对象返回给Host Host把HttpServletResponse对象返回给Engine Engine把HttpServletResponse对象返回给Connector Connector把HttpServletResponse对象返回给客户browser Context # 来看最重要的Context， 一般我们为每个应用做的定制化的东西都是依靠这个来做的，就比如我们要把war包部署成一个默认的应用。</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://Paladnix.github.io/posts/web/cookie/</link>
      <pubDate>Mon, 14 Aug 2017 23:02:35 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/cookie/</guid>
      <description>由于Http协议本身是没有状态的，每个请求都要建立新的连接。Cookie就是为了弥补这方面的不足而设计的，主要用来跟踪会话。
会话 # 跟同一个机器中的同一个应用在一段时间内的通信交互，我们可以认为是一个会话(Session)。 会话与会话之间需要被隔离开。
形象的理解 # Cookie就像是你的一张证明，并且，你跟不同的对方打交道用的是不同的证明。你会把这个证明带在身上，你可以在证明上写东西，对方也可以在上面写东西。在有需要的时候，双方都可以打开这个证明来看看里面的内容。 其本质其实就是一个键值对形式的文本信息。
在控制台中，输入命令：alert(document.cookie) 就可以看到你与当前页面应用之间保存的cookie内容。 手机上的浏览器一般不支持cookie。
跨域 # cookie是以域名作为单位的，同一个域名共享一个cookie。不同域名之间不能操作对方的cookie。 这里就是sso主要要解决的难点。
跨域设置Cookie有几种实现的方式，其中最方便的就是使用jsonp的方式来实现。
jsonp 跨域 # 在JQuery中使用ajax可以处理同一域名下的重定向请求。但是其处理不了跨域名的重定向。
也就是在同一个域名下进行重定向，ajax使得重定向对用户来说是透明的。但如果是跨域的，ajax就会报错。</description>
    </item>
    
    <item>
      <title>SpringMVC</title>
      <link>https://Paladnix.github.io/posts/java/springmvc/</link>
      <pubDate>Wed, 02 Aug 2017 10:41:35 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/java/springmvc/</guid>
      <description>本文是我的学习过程，但是我认为学习过程中并不适合写给别人看。所以本文只是一个临时的笔记，待以后进行深入整合。
SpringMVC与Spring的关系是什么? SpringMVC是依托Spring框架开发的一个Web MVC框架，天生与Spring集成，也就是使用了Spring的依赖注入和切面编程。
上一篇中讲解了Web.xml，这是Java Web的基础，也就是Servlet容器的工作方式，那个也作为本文的基础。
SpringMVC整体可以看成是一个Servlet，事实上它就是一个Servlet。我们配置web.xml来启动这个Servlet，然后这个Servlet来负责处理每个请求。每个处理请求的类都是我们遵照SpringMVC的格式来写的类，由SpringMVC这个框架来调用完成整个请求的处理。
与原本粗放的原生Java Web的开发模式相比，做了一个聚合。原本是每个请求你都写一个Servlet去处理，在web.xml中配置好一个请求与处理类的映射关系，由容器来完成调用。然后SpringMVC是分担了容器的压力，将容器的工作交给他来做，它利用Spring框架的依赖注入的特性，以及bean的工厂模式重新实现后端的实际处理流程。
有好处也有坏处，我也不太清楚这样做的具体目的是什么，可能会有性能上的提升，因为毕竟工厂模式等特性的加入会提升一些性能和开发便利。坏处感觉也挺明显，首当其冲就是学习栈又深了，还不是深了一个单位是好几个单位。加入了新的配置等，开发过程的脑力成本又增加了。
多说也没用，也是要以后逐步深入才能参透其中的奥妙。
maven 配置项目 # 命令行使用mvn构建项目很简单。
mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.0 -DgroupId=com.demo -DartifactId=demo -Dversion=1.0 生成的目录如下：
. ├── pom.xml └── src └── main ├── resources └── webapp ├── index.jsp └── WEB-INF └── web.xml 配置一下项目所需依赖关系pom.xml:
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.demo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;demo&amp;lt;/artifactId&amp;gt; &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;demo Maven Webapp&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;jdk.version&amp;gt;1.8&amp;lt;/jdk.version&amp;gt; &amp;lt;spring.version&amp;gt;4.3.9.RELEASE&amp;lt;/spring.version&amp;gt; &amp;lt;jstl.version&amp;gt;1.2&amp;lt;/jstl.version&amp;gt; &amp;lt;servletapi.version&amp;gt;3.1.0&amp;lt;/servletapi.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>web.xml</title>
      <link>https://Paladnix.github.io/posts/web/web/</link>
      <pubDate>Tue, 01 Aug 2017 20:59:50 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/web/</guid>
      <description>其作用就是配置一个web程序的基本功能。容器在启动一个web项目的时候先读取这个配置文件，在配置文件读取无误后开始按照配置启动剩余的服务。
加载顺序 # &amp;lt;context-param&amp;gt; -&amp;gt; &amp;lt;listener&amp;gt; -&amp;gt; &amp;lt;filter&amp;gt; -&amp;gt; &amp;lt;servlet&amp;gt; 容器会创建一个ServletContext，整个项目都会共用这个上下文。而&amp;lt;context-param&amp;gt;的内容以键值对的形式存在这个上下文中。 然后对读取&amp;lt;listener&amp;gt;，并实例化listener类，并初始化。 listener类中会有contextInitialized(ServletContextEvent args)初始化方法，启动Web应用时，系统调用Listener的该方法，在这个方法中获得：
ServletContext application = ServletContextEvent.getServletContext(); context-param的值 = application.getInitParameter(&amp;#34;context-param的键&amp;#34;); 得到这个context-param的值之后，你就可以做一些操作了。 举例：你可能想在项目启动之前就打开数据库，那么这里就可以在&amp;lt;context-param&amp;gt;中设置数据库的连接方式（驱动、url、user、password），在监听类中初始化数据库的连接。这个监听是自己写的一个类，除了初始化方法，它还有销毁方法，用于关闭应用前释放资源。比如:说数据库连接的关闭，此时，调用contextDestroyed(ServletContextEvent args)，关闭Web应用时，系统调用Listener的该方法。
所以归根结底，这个&amp;lt;context-param&amp;gt;就是用来存一些配置数据的地方。
比如：定义一个管理员email地址用来从程序发送错误，或者与你整个应用程序有关的其他设置。使用自己定义的设置文件需要额外的代码和管理；直接在你的程序中使用硬编码（Hard-coding）参数值会给你之后修改程序带来麻烦，更困难的是，要根据不同的部署使用不同的设置；通过这种办法，可以让其他开发人员更容易找到相关的参数，因为它是一个用于设置这种参数的标准位置。
web-app # 根元素，不用多说
display-name # 应用的名称，这个在tomcat的维护信息中会出现。
session # &amp;lt;session-config&amp;gt; &amp;lt;session-timeout&amp;gt;120&amp;lt;/session-timeout&amp;gt; &amp;lt;/session-config&amp;gt; listener # &amp;lt;!--****************************监听器配置*********************************--&amp;gt; &amp;lt;!-- Spring的log4j监听器 --&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.util.Log4jConfigListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; 监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：
ServletContextListener：用于监听Web应用的启动和关闭； ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变； ServletRequestListener：用于监听用户的请求； ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变； HttpSessionListener：用于监听用户session的开始和结束； HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变。 listener类是实现了以下两个接口中任何一个接口的简单java类：javax.servlet.ServletContextListener或javax.servlet.http.HttpSessionListener，如果想让你的类监听应用的启动和停止事件，你就得实现ServletContextListener接口；想让你的类去监听Session的创建和失效事件，那你就得实现HttpSessionListener接口。
有两种为应用配置listener的方式：
使用@WebListener修饰Listener实现类即可。 在web.xml文档中使用&amp;lt;listener&amp;gt;进行配置。 在下一节配置spring的加载类的时候会给出例子。
spring相关配置 # 配置spring，必须需要&amp;lt;listener&amp;gt;，&amp;lt;context-param&amp;gt;如果有就去加载配置的路径，没有就默认是/WEB-INF/applicationContext.xml。
&amp;lt;!-- spring config --&amp;gt; &amp;lt;!-- if this node is not exist, --&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;/WEB-INF/spring-configuration/*.</description>
    </item>
    
    <item>
      <title>angular</title>
      <link>https://Paladnix.github.io/posts/web/angular/</link>
      <pubDate>Mon, 31 Jul 2017 17:32:01 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/angular/</guid>
      <description>Angularjs 和Angular2 的区别，就像雷锋和雷峰塔的区别。 笑尿了。
我是跟着它的官方文档学习的，文档还是比较健全的，也很细致。地址：[Quick Start](npm install -g @angular/cli)
AngularJS 与 Angular2 # 关于二者的区别，可以肯定的是angular2一定更好。
在细节上，先来说一下angular的特别之处。
其诞生于09年，提出了双向绑定等新特性的概念使得它一出现就被追捧。然而由于09年移动端还没有大规模出现，所以其不支持移动应用的使用。并且其数据绑定使用的是扫描的方式，性能瓶颈很难突破，所以被更适应时代的angular2代替是历史的必然。
所以angular2就拥有了这些它的小弟做的不好的特性。 性能快，支持移动应用开发等。其实现的方式也有很大的区别，所以就出现了雷锋和雷锋塔的区别。
直接来学习angular2的使用 # 首先在什么都不懂的时候先来构建一个实例应用打个招呼：
以下的部分需要：node 6.9.x and npm 3.x.x 及以上。这部分可以去看我的node相关的文章。
Step 1. Install the Angular CLI globally.
npm install -g @angular/cli Step 2. Create a new project
ng new my-app Step 3: Serve the application
cd my-app ng serve --open 你可以看到效果，现在我们来看文件目录。
你的应用需要的内容都在src文件夹中。其他的文件都是用来支撑这个应用的框架代码。下面我们看一下src文件夹的结构：
src # File Purpose app/app.component.{ts,html,css,spec.ts} 定义组件。HTML模板，CSS，Unit Test。这是一个root组件 app/app.module.ts 声明应用如何装配 assets/ 静态资源 environments/ 存放你应用在不同环境下的配置文件。例如在开发环境还是在发布环境 index.</description>
    </item>
    
    <item>
      <title>react 初探-一些基础概念</title>
      <link>https://Paladnix.github.io/posts/web/react/</link>
      <pubDate>Mon, 31 Jul 2017 17:31:49 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/react/</guid>
      <description>（这一篇写的很杂，因为自己也是没有章法的断断续续的看了react的东西，所以内容没有组织好。勉强有个认知就好了）
前端的技术现在发展的其实相对简单了很多，但是我觉得这才是正常的前端，以前的前端发展的太混乱，光是屏幕适配的问题就要搞出很多的工作量。而且以前的前后端的耦合过大，使得前端想发展也不发展不动，不过设计总是在进步，异步请求的普适催生了新的前后端设计模式，使得前后端完全解耦成为可能，前端的事情在前端搞定，后台的事情在后台封装掉。前端发展到今天主要就是接下来我要学习的几个js的框架，利用js实现动态的数据绑定，以及异步的请求，所有的前端操作都在封装在前端，开发的脑智压力开始下降，所以现在的全栈也并不是太难。
这样前端框架会用的人一般都比较多，因为学习栈比较浅，很多人自学一天就可以了。所以相对的资料也就非常完善，网上的学习教程编写教学例子也很方便，所以在这里我主要就是偏理论一些的认知，其背后的设计实现等。
简介 # React是Facebook出品的一款开源框架，虽说是开源，但是其在标准的BSD协议后添加了一些条款，使得现在很多公司并不敢使用这个框架了，其添加条款中说明，如果使用该开源项目的产品威胁到facebook的商业产品，facebook有权起诉该产品。不过没有并那么可怕，因为貌似想威胁到也不太容易。
React这类框架主要的注意力放在的是用户的交互界面上，最突出的就是内容的动态绑定，内容变化后的高效刷新。并且屏蔽了DOM。
React使用的是JSX语法，是一种将js与html混合编写的语言。
Javascript # 在学习使用这个框架之前，必须对Javascript有所了解，因为这是一个Javascript框架。对于这部分了解的就直接跳过去看JSX的语法部分。
这门语言传说是被人误解最深的语言，确实貌似大家的学习路线都没有关注过这个东西，以为就是前端脚本搞着玩的语言，但是其语言还是有很多优点并且应用的场景正越来越多。
JavaScript 是一种面向对象的动态语言，它的语法来源于 Java 和 C，所以这两种语言的许多语法特性同样适用于 JavaScript。需要注意的一个主要区别是 JavaScript 不支持类，类这一概念在 JavaScript 通过对象原型（object prototype）得到延续。另一个主要区别是 JavaScript 中的函数也是对象，JavaScript 允许函数在包含可执行代码的同时，能像其他对象一样被传递。
类型 # Number（数字） String（字符串） Boolean（布尔） Symbol（符号）（第六版新增） Object（对象） Function（函数） Array（数组） Date（日期） RegExp（正则表达式） Null（空） Undefined（未定义） 等
更多基础的语法不冗余重复了。
Javascript对象 # 如果你知道Json的全称，你就理解了这个东西：JSON(JavaScript Object Notation, JS 对象标记)。一个符合Json协议的字符串可以直接解析为Javascript对象。
对于Object的成员访问可以使用链式访问：
var obj = { name: &amp;#34;Carrot&amp;#34;, &amp;#34;for&amp;#34;: &amp;#34;Max&amp;#34;, details: { color: &amp;#34;orange&amp;#34;, size: 12 } } obj.details.color; // orange obj[&amp;#34;details&amp;#34;][&amp;#34;size&amp;#34;]; // 12 下面的例子创建了一个对象原型，Person，和这个原型的实例，You。</description>
    </item>
    
    <item>
      <title>CGI 通用网关协议</title>
      <link>https://Paladnix.github.io/posts/web/cgi/</link>
      <pubDate>Sat, 29 Jul 2017 13:35:17 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/cgi/</guid>
      <description>这是实现Web服务的最基础程序。目前只是看到了一些比较，但是我还没有时间去Read the fucking source code.
这样的程序算是计算机网络中比较有学习意义的代码。
在此简单的介绍一下先。
tcp通信过后，服务端需要有一个程序做为衔接程序，来将请求进一步转发给逻辑服务程序，并将结果返回给浏览器，做了个信使的角色。</description>
    </item>
    
    <item>
      <title>Servlet</title>
      <link>https://Paladnix.github.io/posts/web/servlet/</link>
      <pubDate>Fri, 28 Jul 2017 11:22:45 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/servlet/</guid>
      <description>这里有一些概念非常的恶心，一开始的时候不太好理解是什么。通过一段时间的实践，我逐渐理解，所以直到今天才开始写这一篇。
容器Container # 这个概念从我一开始接触Java就让我很困惑。 首先你需要先去看一下我在后面的一篇关于tomcat的配置文件：server.xml。在那里了解一下配置文件的结构，你可以看懂下面的这张图片。 首先，容器这个东西是针对servlet来说的，也就是我们说的容器都是放置和运行servlet的程序。tomcat是个容器。但是上面的每一级都算是一种容器，只是大小不同。
为什么要有容器 # 其实对于计算机软件体系来说，一切的东西的出现都是因为标准和规定。 所谓容器其实就是一个程序，这个程序按照servlet需要的标准实现了一些接口，使得当你写了一个servlet以后可以成功的放在这个程序中运行，再直白一点就是，你把你的servlet程序交给这个容器，容器可以成功的运行你的程序。
他们之间通过约定一些标志物信息来实现无缝对接。 所以学习这写东西就是在学习了解他们之间约定的事物，以及，为什么这么约定，这样的约定有什么好处和坏处。
容器是一段程序吗？ # 在tomcat中，并没有容器这个东西，所以容器并不是一个东西，就像水果并不是一个具体的苹果一样。容器是一个抽象的概念。
在tomcat中，如上图，有很多的层。这些层就是一个容器结构。他们一起构成了一个完整的容器。
Engine 是一段基础的引擎程序。我认为是整个tomcat的基础，所有的其他容器都在其的调度控制之下。
Host 这是一个逻辑概念，但也有对应的实体。在讲tomcat的配置文件servers.xml 的时候，有提到这个host是什么回事。有了这一层，可以在一个tomcat容器中部署不同的项目，这些项目的域名都是不同的。也就是这个容器可以容纳很多的servlet并且这些servlet可以是几种粒度的。
你可以是完全不同的两个网站，域名都不同，放在一个容器中运行。你也可以是一个网站的不同组件，放在不同的Context内运行。
所以容器是个体系，不是一个东西。 其实按照这个思路，一切皆容器。因为一切的这些都是调度管理，操作系统调度进程，进程调度线程。一切都是接口和约定。所以万物皆容器。
什么是servlet # 这是一个标准，你的程序符合这个标准就是一个servlet程序。 一个类其实就是一个servlet，但是很多个类在一起只要有一个servlet的接口，也是一个servlet。 （在此我们不再讨论tomcat的启动过程，我们更关心一个servlet放入tonmcat容器以后的过程）
来看一下这个图片，这就是servlet主要关联的几个类。 **摘抄：** 从上图可以看出 Servlet 规范就是基于这几个类运转的，与 Servlet 主动关联的是三个类，分别是 ServletConfig、ServletRequest 和 ServletResponse。这三个类都是通过容器传递给 Servlet 的，其中 ServletConfig 是在 Servlet 初始化时就传给 Servlet 了，而后两个是在请求达到时调用 Servlet 时传递过来的。
我们很清楚 ServletRequest 和 ServletResponse 在 Servlet 运行的意义，但是 ServletConfig 和 ServletContext 对 Servlet 有何价值？ 仔细查看 ServletConfig 接口中声明的方法发现，这些方法都是为了获取这个 Servlet 的一些配置属性，而这些配置属性可能在 Servlet 运行时被用到。 而 ServletContext 又是干什么的呢？ Servlet 的运行模式是一个典型的“握手型的交互式”运行模式。所谓“握手型的交互式”就是两个模块为了交换数据通常都会准备一个交易场景，这个场景一直跟随个这个交易过程直到这个交易完成为止。这个交易场景的初始化是根据这次交易对象指定的参数来定制的，这些指定参数通常就会是一个配置类。所以对号入座，交易场景就由 ServletContext 来描述，而定制的参数集合就由 ServletConfig 来描述。而 ServletRequest 和 ServletResponse 就是要交互的具体对象了，它们通常都是作为运输工具来传递交互结果。</description>
    </item>
    
    <item>
      <title>chrome 控制台</title>
      <link>https://Paladnix.github.io/posts/web/chrome/</link>
      <pubDate>Sun, 16 Jul 2017 12:56:55 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/chrome/</guid>
      <description>chrome是一个非常好用的Web开发的工具，而不仅仅是个好用的浏览器。 按下就可以调出控制台，控制台可以与页面分离成为一个单独的窗口。这个在调试大屏效果的时候很方便，但是我不是搞前端设计的，所以不管这个。
这里可以看到有很多选项，常用的有以下几个：Elements、Console、Sources、Network。
Elements 审查元素 # 这里可以看到你的HTML源码，和对应的css。在前端工程师的工作中经常会用到，不过现在自动化的工具越来越多了，也不一定非用这个了，但是这个一定是很强大的功能。 在这个框的最左上角有一个鼠标箭头的标志，点一下就可以到页面上定位某个元素的代码，很好用。 这一块没有什么技术含量
Console 控制台 # 这是一个命令交互的控制台，语言是Javascript。下面就介绍一下常用的几个命令。
console.log() # 这是一组四个命令分别是：console.log()、console.info()、console.error()、console.warn()。其作用就是在控制台中打印信息，在编写前端工程的时候可以这样在js代码中打印log信息来排查问题。
$.cookieStorage.set(&amp;lsquo;id&amp;rsquo;, 1234) # 这是一个cookie操作函数。可以对应的设置cookie的参数值，如上，如果某个网站的用户登录验证使用cookie来做的，你又猜到了其参数的名字，就直接设置cookie就可以登录上去了，免密码呢。
Sources # 这个在调试的时候可以看到自己的页面的每个资源的加载情况，包括时间、来源、是否加载成功等，也可以把资源down下来。
NetWork # 这个我感觉是最好用的一个，他会记录你的异步请求。可以记录请求的地址，参数，返回值等等。
Anything more?
Nothing more&amp;hellip;</description>
    </item>
    
    <item>
      <title>tomcat</title>
      <link>https://Paladnix.github.io/posts/web/tomcat/</link>
      <pubDate>Wed, 12 Jul 2017 11:06:56 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/tomcat/</guid>
      <description>日志 # Tomcat的日志系统还算很完善的。来看一下，当你的应用出现问题的时候要去哪里找原因吧。
apache-tomcat/logs/ |_ catalina.2017-07-12.log |_ catalina.out |_ host-manager.2017-07-12.log |_ localhost.2017-07-12.log |_ localhost_access_log.2017-07-12.txt |_ manager.2017-07-10.log |_ 对应的App应用的log文件夹，取决与你项目用的日志工具。 catalina.out 这里的数据都是代码输出到标准输出流的重定向，所以你的SOUT都在这里。 localhost.DATE.log 是你的应用抛出的错误，如页面运行错误，servlet错误等，常用查错工具。 其实目前我也就用过以上两种日志，可能用法还是不太对，入门的时候查日志感觉日志乱的要死。其实这个也不影响使用就是很影响心情，找错误一般可以直接搜索字符串定位就好了。但是我自己感觉还是要在项目开发之前就做好日志的规划工作，什么时候要打log什么时候不打，log的格式是怎样的。心情必须照顾！
tomcat 安装到发布应用 # 这一部分非常简单。
安装 # 下载tomcat-core代码包,并解压。 到其bin/目录下，linux执行./startup.sh, windows执行startup.bat脚本。 前提是需要配置JDK到环境变量。 打开http://IP:8080 查看效果。 发布应用 # 将你的应用编译打包成一个war包，然后copy到其webapps文件夹下，通过http://IP:8080/NameOfWar访问。 如何开发Java Web？你需要了解：servlet、SpringMVC、maven、javaBean等。
tomcat 源码梳理 # 打算看一下源码是怎么玩的，也有可能看不下去，坑先挖上&amp;hellip;</description>
    </item>
    
    <item>
      <title>rest_framework</title>
      <link>https://Paladnix.github.io/posts/web/rest-framework/</link>
      <pubDate>Sun, 09 Jul 2017 15:23:34 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/rest-framework/</guid>
      <description>这是一款Django下的API开发框架，对于业务逻辑较简单的API来说非常方便，开发速度非常快。
此坑待填&amp;hellip;</description>
    </item>
    
    <item>
      <title>Django</title>
      <link>https://Paladnix.github.io/posts/web/django/</link>
      <pubDate>Thu, 06 Jul 2017 12:56:56 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/django/</guid>
      <description>(注：本文写在N天之中，随着对其的深入学习，很多的看法会发生变化。我也尽量把东西放在这一篇中解决掉，文章思路会有些跳跃，可能先上了细节后面再归档等等。另外，本文会屏蔽一些技术细节，用一些术语来表达，这些术语均是较容易学习的知识块。)
这段时间神奇的技术走位，Java与Python的爱恨交织。
所以既然写到了肯定就是用到了呗，拿到了一个Django的项目，改写成Java的，玩的就是这么欢脱，做为一个写C++出身的入门级Java工程师生活已经如此艰难，然后发现现实是还要兼职Python工程师。
Django也算是工程师玩的玩意儿？封装成了这个样子还有什么好玩的，估计随随便便学2个小时语法加一点Django的框架设计就可以玩起来的，我只能说写这项目的哥们太会偷懒了，服气，骗完钱就离职，更是任性的不行。
言归正传！框架这种东西嘛，就是为了简化开发，提高速度效率，降低合作成本用的，所以django的设计也算是符合了这个目的。但是他并不是简单的照搬了JavaWeb框架的MVC设计思路，而是他妈的又提出了一个神奇的MTC，不用想也知道，就在人家的基础上变来变去还自以为参透了宇宙的奥秘。所谓的MTV就是把几个分工重新分了一下，对，就是要跟人家不一样，日你哥！
不过话回来，就算是对于MVC这个业界都普遍遵循的设计模式，也有很多不同的理解，比如业务逻辑到底该Controller来做还是Model来做，甚至还有人要把这个交给view来做的。之前貌似还看到了个文章讲什么官方设定，话说都发展到这个地步了谁还管你官方设定。不过呢，这都是个设计思路，不同的程序员当然有自己的理解，自己写项目的时候怎么搞都行，但是现在这框架数量真的有点爆炸了，所以大家还是在设计的时候多用点心吧，实现框架的技术不难，但是设计是艺术。
所谓的MTV分别就是： Model、Templete、View。熟悉就对了，你肯定一眼就看懂了，我也是一瞬间就明白了。但是很抱歉，仔细想一下这个Templete如果是前端模板的话，view是啥？如果view用来组装前端模板的话，要model来做业务逻辑吗？那controller岂不是没有了？……就是这么神奇，人家把业务逻辑交给了view来做，我特么也是佩服的吐血。Model就纯纯的数据库操作，就像是一个sql的python版。至于Templete，我已经没有耐心再跟他浪费时间了，老子一个写接口的要什么前端！
对于理解一个框架来说什么最重要？我在很久以前初学框架的时候一脸懵比。我草，这么多代码我得看到什么年？怎么连个主函数都没有，日了狗。。。好在我当时看了一会php，这个比较简单，不用编译一下就能懂，后来我从别人的文章中看到了学习框架的几个步骤等，才知道，看懂路由，就懂了这个框架的一半。
路由 # 提到这个路由，Python这个框架还是让我吃了一惊的。因为这玩意儿不需要容器，厉害啊。写过其他Web的都知道，我们的Web程序是要在一个Web服务程序的组织下做应答的。但是Django抛弃了这个服务程序，严格来说是Python的Web Server抛弃了其他的服务程序，自己写了一个简单的网关程序&amp;ndash;wsgi。其实作用就是做个协议转换，链接机器与python程序，替代了apache2的一些基础功能。不过据说性能欠佳，做做测试还行，上线还是要靠Nginx的帮助，搞个uwsgi。
底层的东西，可以不懂，但是懂一定没有坏处，但是我还没时间搞懂。下面讲一下上层路由。
一个Django的项目特点就是目录比较清晰，比如这个urls.py就是存放路由信息的文件。django在自动化这个地方并没有做太多东西，对于路由信息要显示的写在这里。for一个zample.
from django.conf.urls import url, include from django.contrib import admin import views urlpatterns = [ url(r&amp;#39;^admin/&amp;#39;, admin.site.urls), url(r&amp;#39;^docs/&amp;#39;, include(&amp;#39;rest_framework_docs.urls&amp;#39;)), url(r&amp;#39;^er/&amp;#39;, views.ERView), # ui view url(r&amp;#39;^ui/Node&amp;#39;, ui_views.node_view), url(r&amp;#39;^ui/Cluster&amp;#39;, ui_views.cluster_view), url(r&amp;#39;^ui/InstanceGroup&amp;#39;, ui_views.instance_group_view), url(r&amp;#39;^ui/Chart&amp;#39;, ui_views.chart_view), url(r&amp;#39;^ui.*&amp;#39;, ui_views.home_view), # API url(r&amp;#39;^v1/&amp;#39;, include(&amp;#39;rest_api.urls&amp;#39;)), url(r&amp;#39;^v2/&amp;#39;, include(&amp;#39;rest_api.urls_v2&amp;#39;)), #url(r&amp;#39;^report/&amp;#39;, include(&amp;#39;report.urls&amp;#39;)), url(r&amp;#39;^.*&amp;#39;, include(&amp;#39;rest_framework_docs.urls&amp;#39;)), ] 路由中可以预留参数位置，可以写正则表达式，论灵活性也还行。看到有些东西后买你跟的不是一个类，而是一个import语句，这是将路由转移到这个新的应用中去了，所以要去这个应用下再找对应的文件去继续路由，直到找到某个类为止。上面这个程序中其实是用到了一个叫rest_framwork的东西，这个玩意貌似是用来写网页文档用的东西，不过这个不是重点。
既然找到了这个类，那么有个经典的问题又来了。去调用那个函数啊？这就涉及到了django路由的两种方式，一种是定义到函数，另一种是调用到类。一把小项目就自己定义到函数就好了。但是当项目比较大的时候就需要将路由定义到类的身上，注意这里我们说的都是在views.py 中的类。
对于基类View，其暴露了一个as_view()的函数，该函数会对请求进一步做分发。下面两个就是这种方式路由的。
url(r&amp;#39;^Unit/(?P&amp;lt;pk&amp;gt;\w+)&amp;#39;, UnitDetailView.as_view(), name=&amp;#39;UnitDetail&amp;#39;), url(r&amp;#39;^Unit&amp;#39;, UnitView.as_view(), name=&amp;#39;Unit&amp;#39;), as_view() 是如何做分发的呢？它会调用一个dispatch函数对请求方式做个路由出去再调用到你真正的处理函数。总是很麻烦，还没来得及看代码。 不过这里有一个简化的另外一个类，继承的时候继承Generic.</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://Paladnix.github.io/posts/java/maven-1/</link>
      <pubDate>Sun, 02 Jul 2017 21:48:02 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/java/maven-1/</guid>
      <description>使用maven已经是不可避免的事情了，如果你是个java工程师的话。并且，使用maven基本上是你最好的选择。但是我并不喜欢用IDE来集成maven，这算是强迫症，命令行强迫症。
Maven 是什么？ # 传说他的功能十分强大，目前我感受到的是如下几个功能：
自动构建项目结构，根据不同的框架需求 自动包依赖管理 自动编译工程 自动启动测试 总而言之就是恰到好处的做了你觉得很麻烦又没有必要自己做的事情。 安装 # 跟JDK是一个思路的，在环境变量中添加M2_HOME即可。
使用 # # 创建Java Web 项目 mvn archetype:generate -DgroupId=com.hello -DartifactId=hello -DarchetypeArtifactId=maven-archetype-webapp # 生成项目 mvn install # 发布到tomcat # 复制生成的./target/xxx.war到tomcat目录下的webapps中去，如果不能访问就重启一下tomcat。 上述是将项目自带的helloworld页面显示出来，我们自己使用会用到一个更核心的方法&amp;ndash;配置文件。
pom.xml # 这个配置文件是maven的核心。
在创建好的文件夹中有一个pom.xml 这里的内容分成两部分，一部分是你的项目基本信心，叫啥，啥版本的等等；还有一部分是我们要配置的部分。这一部分又分成好几部分，有依赖关系(dependencies)、生成(build)等等。
下面是一个Maven的基本结构
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;!-- The Basics --&amp;gt; &amp;lt;groupId&amp;gt;...&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;...&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;...&amp;lt;/packaging&amp;gt; &amp;lt;dependencies&amp;gt;...&amp;lt;/dependencies&amp;gt; &amp;lt;parent&amp;gt;...&amp;lt;/parent&amp;gt; &amp;lt;dependencyManagement&amp;gt;...&amp;lt;/dependencyManagement&amp;gt; &amp;lt;modules&amp;gt;...&amp;lt;/modules&amp;gt; &amp;lt;properties&amp;gt;...&amp;lt;/properties&amp;gt; &amp;lt;!-- Build Settings --&amp;gt; &amp;lt;build&amp;gt;...&amp;lt;/build&amp;gt; &amp;lt;reporting&amp;gt;...&amp;lt;/reporting&amp;gt; &amp;lt;!-- More Project Information --&amp;gt; &amp;lt;name&amp;gt;...&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;.</description>
    </item>
    
    <item>
      <title>jersey</title>
      <link>https://Paladnix.github.io/posts/java/jersey/</link>
      <pubDate>Sat, 01 Jul 2017 20:32:52 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/java/jersey/</guid>
      <description>jersy是一个Web Service的框架，据说是符合RESTful架构的一种框架，这是一种新的思路，而不是新的技术，是对于前端的各种技术而言，所设计的后台实现方式，力图以一种统一的方便的方式组织为前端提供数据。 jersey的官网.
此次接触这个框架是业务需要了，但是，觉得这个框架比较简单，正好也有时间，所以就做一个学习实验，探索一下在资源短缺的情况下如何学习一个新的东西。事实上资源也确实不是很多，这一次主要依靠官方文档学习使用。
原本打算直接上代码的，但是在官网上看了一会后就发现有好多名词解释的问题。那就先来看几个名词。
首先第一个就是JAX-RS，这是JAVA EE6引进的新技术，全称Java api for RESTful Web Service. 主要是使用了注解的形式来简化Web开发和部署。然后跟Jersey的关系是Jersey实现了JAX-RS的框架接口，并且扩展了更多的东西，提供了自己的API。
然后学习Jersey的第一步就是搞懂他的路由方式，在这里就是注解了。
在讲注解之前还有一个不是很重要的名词：POJO(Plain Old Java Object), 称之为简单一般Java对象，这个概念是与JavaBean做区分的。其实没有什么必要，引用Martin Fowler的一句话：
“我们疑惑为什么人们不喜欢在他们的系统中使用普通的对象，我们得到的结论是——普通的对象缺少一个响亮的名字，因此我们给它们起了一个，并且取得了很好的效果。” ——Martin Fowler
所以事实上也就是个名词，所谓简单Java对象就是不包含业务逻辑的对象，一般用于描述数据实体。具体的区别等到写JavaBean的时候就看出来了，这里不讲了。
在我手中的项目使用了其中的两个包，maven代码如下：
&amp;lt;!-- jersey --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.25&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.25&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 可以看到一个是servlet的Container，另外一个是client客户端。具体的用法，等到用到再说。
注解路由 # 这里用的路由就是JAX-RS的规范。（一次写不完，慢慢补充）。
@Path # 这个注解的原文解释非常好，所以有时间的还是去看一下原文是怎么写的吧，下面我就结合自己理解写一下。
这个@Path注解的内容是一个相对的URI路径，由其注解的类会被相应的路径访问到。
在下面这个例子中可以看到，这个类被一个@Path注解为&amp;quot;printers&amp;quot;，当URL路径为/printers的时候就会路由到这个类中，那么这个类有那么多函数，调用那个函数呢？下面还有子路径以及路径的通信方式。
首先HTTP-Methods都是被支持的，常用的有：
@POST @GET @PUT @DELETE 并且对于每个函数都可以进行@Path的进一步注解，有过Web开发经验的人都知道是怎么玩的。如果你的URL路径是/printers/list， 就会定位到getListOfPrinters()函数。同理可知其他的用法。 需要说的可能是如果一个函数没有注解而其他的函数有注解，在路径为printers的时候就会定位那个没有注解的，因为其他的都是精确匹配的，按照精确匹配无法匹配到其他的函数，这个是不精确匹配的，所以就过来了。 对于/，开始和结尾的位置可以加可以不加，都能够被解析。除此以外，这里还有些内容你可能看不太懂，下面会讲。
@Path(&amp;#34;/printers&amp;#34;) public class PrintersResource { @GET @Produces({&amp;#34;application/json&amp;#34;, &amp;#34;application/xml&amp;#34;}) public WebResourceList getMyResources() { ... } @GET @Path(&amp;#34;/list&amp;#34;) @Produces({&amp;#34;application/json&amp;#34;, &amp;#34;application/xml&amp;#34;}) public WebResourceList getListOfPrinters() { .</description>
    </item>
    
    <item>
      <title>Husky - A Light Web MVC Framework</title>
      <link>https://Paladnix.github.io/posts/web/husky/</link>
      <pubDate>Wed, 17 May 2017 21:56:06 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/web/husky/</guid>
      <description>这篇文章是对我自己编写的PHP MVC 框架：Husky 的详细说明， 算作是官方说明文档。
项目的GitHub地址
Husky是什么？ # Husky 是一个使用PHP语言编写的Web MVC微框架，此项目最初是作者偶然看到的一篇博客中的教学项目。我对项目的代码进行了一些修改和整理，删除了一些不必要的内容，添加了部分设计，目前框架处于第一个版本(Husky-0.9)，框架将会长期维护更新。目前只在Linux开发环境下测试可用。
如果你是一个初出茅庐的Web开发者，那么本框架就十分适合你来使用了。相比较很多成熟的PHP框架来说，Husky的体积小，逻辑简单，还没有加入很多集成的自动化功能。整个框架按照一个既定的数据格式实现了MVC开发的需求，更主要的是，在一定程度上说，这个框架还处于比较原始的状态， 这对新手深入了解框架的体系结构十分有利，你可以按照自己的想法对框架进行修改，甚至可能在此基础上改写出更出色的框架。
本框架的开发初衷是为作者所在的学生社团开发网站，多人合作模式下编写网站没有一个框架实在太乱了。但是衡量工作内容，于是决定自己开发一个微框架来辅助网站的开发，就有了这个项目。
你需要掌握什么？ # 此框架需要一定的php网站开发经验才能熟练的使用。所以在使用之前，你需要具备以下的知识或能力:
配置apache2 的Rewrite功能 数据库SQL语句 php基本语法 面向对象编程的基本知识 简要了解http协议与请求url链接 清楚的了解软件 MVC 架构的组成 在进一步开发框架之前，你需要进一步具备以下的知识或能力:
apache2 的更多配置选项 熟练掌握http协议 深入理解 MVC 框架结构 熟练使用php语言进行面向对象编程 熟练使用PDO数据库操作库 良好的编程习惯 Husky 做了什么？ # Husky 实现了下面几个功能：
唯一的网站入口，url地址重定向 自动化加载MVC控制类，自动化解决类间依赖 过滤SQL注入攻击的安全问题， 使用PDO进行数据库操作 Controller、Model、View模块分离 定义数据参数等的格式 配置环境 # 框架需要软件环境：
Linux apache2 php(&amp;gt;=5.4) mysql 开启apache2 rewrite 功能 # 默认的Ubuntu apache2是没有开启这个功能的，要先去看一下 /etc/apache2/mods-enabled/ 文件夹下是否存在rewrite.load 模块的链接，如果没有，要去看一下 /etc/apache2/mods-available/ 中是否存在对应的文件，如果有，则使用下面的命令建立一个链接到 ../mods-enabled/ 文件夹下：
$ ln -s /etc/apache2/mods-available/rewrite.</description>
    </item>
    
  </channel>
</rss>
