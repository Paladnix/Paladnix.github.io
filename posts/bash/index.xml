<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/posts/bash/</link>
    <description>Recent content on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 May 2018 15:45:40 +0000</lastBuildDate><atom:link href="https://Paladnix.github.io/posts/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编写Bash脚本</title>
      <link>https://Paladnix.github.io/posts/bash/bash/</link>
      <pubDate>Fri, 18 May 2018 15:45:40 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/bash/bash/</guid>
      <description>作为一个Linux用户，不会自己写Bash脚本，简直太讽刺了，跟windows用户有什么区别，用鼠标点一点。 使用Bash脚本来解放生产力非常重要。不要做重复性的无意义的劳动。
Bash 脚本头（shebang） # 这个东西汉语里叫&amp;quot;蛇棒&amp;quot;，难听。 以#! 开头的，在没有指定解释器的情况下，使用后面路径的解释器运行。
常用的bash命令解释器： #! /bin/bash
Command arguments # Variables About Example $# The number of arguments. while [[ $# -gt 0 ]] do &amp;hellip; done $1 The first argument. echo &amp;ldquo;$1&amp;rdquo;; KEY=&amp;quot;$1&amp;quot; $@ All arguments as a list. for i in &amp;ldquo;$@&amp;rdquo; shift Past one string of commands that splited by space. shift # one line </description>
    </item>
    
    <item>
      <title>awk - Linux文本处理大杀器</title>
      <link>https://Paladnix.github.io/posts/bash/awk/</link>
      <pubDate>Thu, 07 Sep 2017 17:44:07 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/bash/awk/</guid>
      <description>awk 已经不是一种命令了，而是一种语言。用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。
在最开始，我的文本处理方式就是写一个c语言去读文件然后在处理完输出来。刚开始学程序的时候觉得自己很厉害的样子。这样做过几次以后就发现并没有这么好用，因为每次都要写一个很麻烦。
在后来就是学习用脚本来处理。
关于Linux命令，推荐一个小站点，写的东西都还非常细致。
命令形式 # awk [options] &amp;#39;script&amp;#39; var=value file(s) awk [options] -f scriptfile var=value file(s) 命令选项
-F fs fs指定输入分隔符，fs可以是字符串或正则表达式，如-F: -v var=value 赋值一个用户定义变量，将外部变量传递给awk脚本 -f scripfile 从脚本文件中读取awk命令 脚本模式和操作 # awk的脚本主要由模式和操作组成：
模式 # /正则表达式/：使用通配符的扩展集。 关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。 模式匹配表达式：用运算符~（匹配）和~!（不匹配）。 BEGIN语句块、pattern语句块、END语句块 操作 # 操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：
变量或数组赋值 输出命令 内置函数 控制流语句 awk脚本的基本结构 # awk &amp;#39;BEGIN{ print &amp;#34;start&amp;#34; } pattern{ commands } END{ print &amp;#34;end&amp;#34; }&amp;#39; file 一个awk脚本通常由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被单引号或双引号中，例如：
awk &amp;#39;BEGIN{ i=0 } { i++ } END{ print i }&amp;#39; filename awk &amp;#34;BEGIN{ i=0 } { i++ } END{ print i }&amp;#34; filename 工作原理 # 第一步：执行BEGIN{ commands }语句块中的语句； 第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ commands }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕 第三步：当读至输入流末尾时，执行END{ commands }语句块。 BEGIN语句块 在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。 END语句块 在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。 pattern语句块 中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块。</description>
    </item>
    
    <item>
      <title>真正的老司机如何用Linux文本命令</title>
      <link>https://Paladnix.github.io/posts/bash/commands/</link>
      <pubDate>Thu, 27 Jul 2017 17:23:29 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/bash/commands/</guid>
      <description>Tomcat是最烂的软件，没有之一！Over! 因为日志系统冲突的问题，这两天跟Tomcat斗争了好久，最终被其无耻下流卑鄙所折服，自信点，你就是最烂的！于是就诞生了上一篇长文来叙述日志是怎么搞，现在这一篇也是在实战中学习到的。
曾经学这些命令的时候只知道这些命令有很多功能，也很困惑，一个命令搞这么多参数干嘛，有什么用啊，我反正不会用。然后今天就脸红了，是我不会用。 不得不说设计这些命令的前辈真的很厉害，然后发现windows就这么丢弃这些东西真的是自断后路。盖茨肯定意识到电脑以后会是标配，但是他一定没有意识到自己在让计算机变傻。或许他本身就很傻吧，不是很能懂，自己一个号称最优秀的程序员之一的人，在设计计算机的时候就这么把这些东西屏蔽掉，自己真的打算用吗？计算机是越来越多了，但是其真正强大的功能都被windows阉割了，也阉割了真正的优雅，一定程度上，我认为盖茨理解错了计算机处理信息的价值。
我喜欢vim、latex、linux他们都有一个共同的特点，就是连通性非常强，而且操作简单。在工作过程中除了浏览网页，我基本上不会用鼠标，快捷键加命令可以无所不达。
一般我会开两个终端窗口，一屏左右各占一个。开发服务器相关的应用的时候左边终端在本地，右侧终端ssh连进服务器。就单单这一个操作，在windows下就要复杂N倍，要安装软件才能支持ssh协议，还要软件模拟服务器终端，丑的要死不说，各种切换操作都要依靠鼠标&amp;hellip; 而在linux的终端下，每个操作都只是简单的一个命令的事情，可以用命令完整精准的描述你的想法，所想即所得。
下面几个命令，很强大。 ps、less、head、tail、grep、watch&amp;hellip;
ps # 你知道Tomcat自己的bin/shutdown.sh是无法把自己关闭的吗？很抱歉，我特么这么用了一天了。然后ps发现一堆tomcat进程在跑，顿时恐惧袭上心头。关不掉你就别写个shutdown.sh啊，坑死爸爸了。 下次要关tomcat就特么直接kill，就不用那么麻烦了。
ps 命令是一个系统进程的快照。他通过读取/proc文件的方式获取信息。 使用man 命令获取内置说明文档：man ps，就可以看到各个参数的说明。这里会介绍一些参数的用法，但是仅仅是做个记录而已，有价值的东西是后面的实战例子。
在参数中，ps命令支持三种命令格式：
Unix 带短线(dash)：-a 参数 BSD 不带短线(dash)：a 参数 GNU 两个连续短线(two dash)：--a 参数 一般我用Unix格式的参数。 在解释这个命令之前还要解释一个东西就是Linux的进程。 在Linux中，一个进程组(process group)都是独一无二的会话(session)，这个session的ID就是这个session的第一个process的ID。这个进程也叫做the session leader。
-e 获取所有的进程，与-A 一毛一样。 -aux 获取所有的进程的详细信息。包括没有tty的进程和leader进程。 包含一下信息： USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND -C cmdlist 获取对应cmd的进程 -p pidlist 获取对应pid的进程 -u userlist 获取对应user的进程 -f 获取格式化信息 --sort spec 根据spec排序输出，example：ps jax --sort=uid,-ppid,+pid + - 代表增序和降序 example: 按cpu时间排序 ps -aux --sort -pcpu example: 按内存使用排序 ps -aux --sort -pmem example: ps -aux --sort -pcpu,+pmem 多标准排序 k 与sort同等作用 -L pid 获取特定进程的所有线程 -jaxf 以树形显示进程 -eo 控制输出，可用来产看特定字段信息 example: ps -eo pid,user,args 查看谁登录了你的机器 -m 在进程后面输出线程 上面这些只是基础知识，下面在补充一些： 进程状态STAT代码</description>
    </item>
    
  </channel>
</rss>
