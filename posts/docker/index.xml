<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/posts/docker/</link>
    <description>Recent content on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://Paladnix.github.io/posts/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/docker/build-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/docker/build-image/</guid>
      <description>如何构建自己的镜像 # 当我们需要对外提供一个配置好的基础环境时，我们需要自己打包构建一个image镜像，并发布出去。
大致的流程是：拉取基础镜像、进入镜像并安装依赖、退出容器并打包、上传至中央仓库。
以一个简单的C++调试环境为例 # 选择ubuntu作为基础镜像： docker pull ubuntu 查看是否拉取成功：
docker images 以交互的方式启动容器 docker run -it ubuntu /bin/sh 在容器内部安装g++和gdb程序， 并退出 apt update apt install g++ gdb exit 找到容器并打包 docker container ls -a 可以看到有我们刚刚退出的容器，此时容器已经停止运行，但是容器依然存在。
docker commit -a paladnix -m &amp;#39;simple gdb&amp;#39; cbf13e09376d simple-gdb:1.0 docker images 可以看到我们已经有了两个image：
REPOSITORY TAG IMAGE ID CREATED SIZE simple-gdb 1.0 1a46f7f7599e 16 seconds ago 446MB ubuntu latest ba6acccedd29 8 weeks ago 72.8MB 通过dockerfile来创建镜像 # Dockerfile</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/docker/docker-limit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/docker/docker-limit/</guid>
      <description>运行Docker的容器时，我们往往需要对其进行资源管控，并且会有一些数据传输的需求。
运行 # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/docker/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/docker/k8s/</guid>
      <description> 如何搭建一个K8s的集群 # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/docker/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/docker/readme/</guid>
      <description>Docker 的基本理念与设计 # Docker是一种基于cgroup技术的虚拟容器技术，其设计核心思路与Git类似。
镜像与容器 # 镜像(image)可以简单的理解为一个小型的OS或者APP，其好处是可以直接通过docker启动执行，而不需要配置乱七八糟的依赖环境。而容器(container)则是启动后的镜像，同一个镜像可以被多次启动。
启动一个容器以后我们可以使用交互模式启动也可以直接启动某个程序，或者在构建镜像的时候就指定默认启动程序。</description>
    </item>
    
  </channel>
</rss>
