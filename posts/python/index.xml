<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/posts/python/</link>
    <description>Recent content on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Sep 2018 13:47:12 +0000</lastBuildDate><atom:link href="https://Paladnix.github.io/posts/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python type</title>
      <link>https://Paladnix.github.io/posts/python/python-type/</link>
      <pubDate>Sat, 22 Sep 2018 13:47:12 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/python/python-type/</guid>
      <description>type 的普通用法 # type一般的用法使用来获取一个变量的类型，但是，type并不适合用来获取一个变量的类型。
想获取一个变量的类型，有其实类的实际类型要用isinstance
isinstance # class A: pass class B(A): pass isinstance(A(), A) # returns True type(A()) == A # returns True isinstance(B(), A) # returns True type(B()) == A # returns False a = 111 isinstance(a, int) # True python中有一种old-style class 这些类用type直接取得到的都是instance， 也就是所有的类实例都是一样的。在后来的new-style class中，得到的会有区别但是，依然不能很好的判断子类的问题。
type 创建一个类型 # 这个用法我看到的时候反正是一脸懵逼，莫非是用来动态创建类用的？
用法：
#type(classname,(parents,...),{attribute}) #第一个参数classname是类名,第二个是一个父类元组，没有可填空元组，第三个参数是类属性字典。 #!/usr/bin/env python # coding=utf-8 class XA(object): a = 1 XB = type(&amp;#39;XC&amp;#39;, (object, ), dict(a=3)) Xa = XA() Xb = XB() # Xc = XC() # syntax error， there is no such a class named XC， only XB as a llegal class name.</description>
    </item>
    
    <item>
      <title>python 多线程和异步</title>
      <link>https://Paladnix.github.io/posts/python/python-multithreaded/</link>
      <pubDate>Fri, 21 Sep 2018 13:38:39 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/python/python-multithreaded/</guid>
      <description>python 的多线程还有协程这种东西。
线程池 # 关于多线程的实现，各种语言基本上都是一样的。
一种是集成一个线程的基类，然后重写一个run()函数。这类写法比较好理解，非常直观就是创建一个线程交给操作系统。
因为每个线程都有确定的程序起点、执行顺序、程序终点。因此这个函数就是起点。
另外一种就略有区别，Java中就是实现一个接口，在python中没有接口就是直接传个函数去构造出一个线程。Java中的接口其实很不好理解，因为这个接口只是实现了一个逻辑在run()函数里， 实例化这个类的时候并没有创建这个线程，还要单独用这个类的实例去再实例化一个线程。然后在start这个线程。
无论是那一种，在底层都是一样的。就是把一段逻辑写进一个函数中，作为一个起点用来生成一个线程资源。而这个工作，都是基类Thread来实现的。
因此只要给Thread类一个程序入口就可以构造出一个线程了。
线程的启动和设定都很好解决。有一个问题就是创建线程也是要话费时间的。因此就有线程池的思想。
线程池的优点:
避免线程的创建和销毁带来的性能开销。 避免大量的线程间因互相抢占系统资源导致的阻塞现象。 能够对线程进行简单的管理并提供定时执行、间隔执行等功能。 两个单词区分一下：async（异步）、 sync（同步）</description>
    </item>
    
    <item>
      <title>Tutorial of anaconda &amp; 原生虚环境</title>
      <link>https://Paladnix.github.io/posts/python/anaconda/</link>
      <pubDate>Wed, 28 Mar 2018 17:31:19 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/python/anaconda/</guid>
      <description>什么是conda？ # anaconda是一个用于科学计算的python发行版。其中预置了一些用于科学计算的库，诸如numpy等。
并且包含一个包管理系统，可以方便的安装相关的库。
我使用conda主要是搭建机器学习的环境。
Install # 在conda的download页面找适合自己的安装包下载，在Ubuntu上会得到一个bash脚本文件。 也可以使用命令：
wget https://repo.continuum.io/archive/Anaconda2-5.1.0-Linux-x86_64.sh 然后使用root权限运行就可以了。 在运行的过程中，会询问你一些设置方案，如安装的路径、是否要添加进入PATH等。
检查是否安装成功 # 使用命令：
python -V 出现：
Python 2.7.14 :: Anaconda, Inc. 说明安装成功
使用conda创建自己的开发环境 # 学过python的都知道，py的版本兼容实在太随意了。因此py为了解决同一台电脑上需要不同py环境的问题，设计了一个虚环境。也就是我们可以创建一个虚环境，然后进入这个虚环境安装我们需要的包，这些包的作用范围就是在这个环境中。
因此也就实现了环境隔离。 一般我们在开始一个开发的时候，都会先创建一个虚环境。
使用conda创建tenserflow训练环境 # # 创建名为:nlpcc-1.0 的虚环境 # 指定python版本为2.7, tensorflow版本为1.0的gpu版， # 需要安装anaconda conda create -n nlpcc-1.0 -c anaconda tensorflow-gpu=1.0 python=2.7 # 为当前环境安装包 conda install numpy # 升级包的版本 conda update numpy # 删除包 conda remove numpy # 列出当前环境的包 conda list # 删除一个环境 conda remove --name nlpcc-1.</description>
    </item>
    
  </channel>
</rss>
