<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/posts/c&#43;&#43;/</link>
    <description>Recent content on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Sep 2017 21:31:44 +0000</lastBuildDate><atom:link href="https://Paladnix.github.io/posts/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective C&#43;&#43; 读书笔记</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/effectivec-1/</link>
      <pubDate>Sat, 23 Sep 2017 21:31:44 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/effectivec-1/</guid>
      <description>从北京回来，决定花三天时间把这本书看掉。有两个原因，第一个是我希望主要精通的语言还是选择C++，因为其功能强大，且速度快；优秀的程序员就应该精通C++才可以。其次是在即将要学习的机器学习和深度学习的领域中，C++是后期算法工程化的重要一环。
如果是看完这本书，我觉得三天就够了。如果是精研每个细节就要花个一周了，我决定先快速的get到重点的内容，在接下来写代码的过程中再实践出来。
本书架构 # 这本书被冠以盛名，源自于其内容的独特性、优质性。 书中不是详细介绍C++的各种特性，而是从大量的工程经验中思考c++编写代码的优秀习惯。
本书全局来看，由55条准则构成。这55条准则被由浅入深的分成了8个模块，还有一个杂项模块作为第9个模块。 下面我就这些准则和书中的内容做个整理。
1. 让自己习惯C++ # View C++ as a federation of languages # C++ 今天已经是一个多重范型编程语言，同时支持过程形式、面向对象形式、函数形式、泛型形式、元编程形式的语言。 因此这是一个语言的联邦，几乎各种语言的编程模式都可以在C++中得到体现。 最主要的是，做到这些并且保持着速度。
Prefer const, enum, inline to #define # 主要就是讲了#define的种种缺点。 从我自身的使用上来说，简短的单文件程序中，使用define还是可以的，但是看别人的代码中就非常的困难了。因此我自己也是不倾向于使用define来定义一些东西。
常量： 对于常量我们可以使用const来定义，而不是使用define。这样不仅安全，而且编译后的代码更少。 define的一个比较严重的问题就是作用域的问题，其并不重视作用域，在编译的时候，对此后的内容均有效，除非遇到undefine。但是一个常量是可以有作用域的限制的。 除了使用const还可以用enum来定义一个常量，
class Game{ private: enum{ NumTurns=5 }; } 这样就定义了一个5的代名词，但是并不会被取到地址，也不会被改变。如果使用者企图调用这个的地址会在编译时就被报错，而不是像const那样在运行时报错出来。
函数 很多人会define一个小函数，来达到函数的作用又减小了函数调用的开销。但是这样写，一个是不直观，容易错；还有就是括号要很多，也容易出错。用inline是一样的效果。
Use const whenever possible # 关于const的语法的细节，可以参考之前的相关的内容。 使用const可以避免很多错误，与上面一样，这些错误很可能会发生在运行时。但是如果你适当的用了const，就会在编译的时候被避免。
CLASS a, b ,c; if( a*b = c) 内置类型会编译报错没有问题，但是对于自定义的类型，就会出现意想不到的错误。
确保使用的变量都被初始化了 # 这里有一个很有趣的东西，叫做冒号表达式，没错，就是那个冒号表达式。与一般的赋值初始化不同的是，冒号表达式更快速。
class A{ Som a, b; A(Som _a, Som _b){ a = _a; b = _b; } A(Som _a, Som _b):a(_a), b(_b){} } 对于第一种写法，需要先调用每个类的默认构造函数，随后进行复值。但是默认构造函数就浪费了。 对于第二种，直接调用其copy构造函数，所以更快。</description>
    </item>
    
    <item>
      <title>C 函数指针</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/funcp/</link>
      <pubDate>Thu, 17 Aug 2017 20:36:22 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/funcp/</guid>
      <description>C语言有了函数指针以后，就算是完整了，构建了这个世界。
先来看三个例子：
A) char * (*fun1)(char * p1,char * p2); B) char * *fun2(char * p1,char * p2); C) char * fun3(char * p1,char * p2); 最后一个很好理解，fun3是函数名，函数返回一个char*。 中间个是返回一个二级指针，本质与最后一个没有什么区别。
在第一个中，其实就是函数指针了，fun1是个函数指针，这个函数返回一个char*。
函数指针其归根结底是一个指针，所以他是可以赋值的。如下的一个函数指针：
int (*p)(int a, int b) = NULL;//初始化为 NULL 如果我们要给 p 赋值的话，我们就应该定义一个返回值类型为 int ，两个参数为 int 的函数：
int add(int a, int b) { return a + b; } p = add;//给函数指针赋值 经过上面的赋值，我们就可以使用 p 来代表函数：
p(5, 6);//等价于 add(5, 6); printf(&amp;#34;%d\n&amp;#34;, p(5, b)); 当然这并不是主要的用法，最主要的用法是用作回调函数。</description>
    </item>
    
    <item>
      <title>cpp lamda &amp; for_each</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/cpp-1/</link>
      <pubDate>Thu, 17 Aug 2017 17:49:11 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/cpp-1/</guid>
      <description>既然学习了java的lamda表达式，当然要来顺便学习一下C++的实现。
lamda # C++11 有了对lamda表达式的支持。基本的形式有下面几种：
|&amp;mdash;&amp;ndash;| | [capture] ( params ) mutable exception attribute -&amp;gt; ret { body } | | [capture] ( params ) -&amp;gt; ret { body }	| | [capture] ( params ) { body }	| | [capture] { body }	|
[capture]: 需要用到的外部变量 [a,&amp;amp;b] a变量以值的方式呗捕获，b以引用的方式被捕获。 [this] 以值的方式捕获 this 指针。 [&amp;amp;] 以引用的方式捕获所有的外部自动变量。 [=] 以值的方式捕获所有的外部自动变量。 [] 不捕获外部的任何变量。 [&amp;amp;, x] x显式地按值捕获. 其它变量按引用捕获 [=, &amp;amp;z] z按引用捕获. 其它变量按值捕获 (params): 函数的参数, 无参数括号可以省略。 mutable: 修饰符说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获对象的 non-const 方法。 exception: 说明 lambda 表达式是否抛出异常(noexcept)，以及抛出何种异常，类似于void f() throw(X, Y) attribute: 用来声明属性 几个例子：</description>
    </item>
    
    <item>
      <title>随想-关于语言的一些感受</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/c/</link>
      <pubDate>Tue, 08 Aug 2017 16:41:48 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/c/</guid>
      <description>以前觉得C语言很菜，因为连面向对象都没有，一本C语言的书也就200页撑死了。
后来学习了C++，一本书动不动800页，多则1500多页，我以为C++很屌。
后来我接触了Java，发现这个语言虽然用的人很多，但是，很不优美，是一个非工程师可以用的东西。我还是觉得C++很屌。
再后来我接触了python，我觉得这个语言的作者是个奇葩，不过确实很多工具很方便，这个就是个功能偏强大的玩具了。但是确实很厉害，开发速度飞起来。不过我还是觉得C++很屌。
后来接触了bash脚本，哎，这个语言很有趣，但是很鸡儿菜，写起来别别扭扭的，就像搭积木一样，还不能搭太高。不过我还是很喜欢它的，但是我还是觉得C++很屌。
然后用起了php，虽然也是菜鸡儿，但是真的很直白嘛，是个人都能懂。所以C++还是屌。
最近用起了Javascript。我操！这语言特么有毒，乱七八糟的问题，虽然应用范围越来越多，但是还不那么优美，还是C++比较屌。
然后我发现了一个神奇的现象，Linux用C语言写的，mysql用C语言写的，各种驱动C语言写的，各种网关C语言写的，redis也是用C语言写的。为啥?
这说明了，特么的C语言才是最屌的。短短200页就道尽C语言精髓，短短200页就构建起了这个世界的一半基础。C语言有的除了指针，就是指针，再花哨一点的就是有函数指针这个大杀器。
那些说什么C语言指针难用应该都是傻逼吧。真正的程序员，指针就是万能的上帝之手好嘛！
至于C++，很强是实话，能驾驭C++的程序员也很强，这是大实话。但是，能驾驭C++的不多，这就很尴尬了。要对象有对象，要指针有指针，要动态绑定有动态绑定，要多态有多态。。。但就是出了Bug不太好找，没办法，就有点失宠了，不过说到底还是因为人菜！语言是好语言，所以C/C++最屌！
不要跟我说什么生产力，老子不Care！我不管！我就是喜欢，走不动道了。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; OOP--const、引用、指针</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-3/</link>
      <pubDate>Tue, 30 May 2017 17:39:54 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-3/</guid>
      <description>继续梳理C++中的问题， 今天梳理的是最基础的几个概念，也是比较麻烦的概念。
引用 # 引用是一个变量的别名，声明时必须初始化，而且之能在初始化的时候绑定一个变量对象。
引用不能绑定在引用上，因为引用本身不是对象。 普通引用不能绑定到立即数上，因为立即数不是对象，但是常量引用是可以的。 普通引用不能引用类型不同的对象。 以上的普通引用是相对于常量引用来说的，下面会介绍到。
指针 # 这个概念最简单，他不是是一种数据类型，他的数值是个地址，可以用解地址符*来直接操作指向的地址内的变量。
指针有下面四种状态:
指向一个对象; 指向紧邻对象的下一个位置； 空指针(nullptr, 避免使用NULL，nullptr可以被转为任意类型的指针); 其他指针装态(无意义的状态)； const 常量 # const 修饰的常量，默认是文件内有效，如果想在多文件内可用，就加extern修饰。
这个和其他的东西一结合就比较烦。
首先const是声明常量的作用，用其修饰的变量值必须初始化且不可更改。这就是普通常量了，很好理解。
const 引用 # 如果你声明了一个引用，并且这个引用是const修饰的，那么，你要知道两个事情：第一，引用不能绑定到其他变量了；第二，用这个引用不能改变做引用的对象的值了，但是不影响那个变量通过其他途径改变，改变后的值一样会在引用中表现出来。
如果你引用的对象是个常量，那么这个引用也必须是常量。反过来没有这个限制。
const 指针 # 指针这块又有两种，因为指针是可以改变其指向的对象的，并且其指向的对象也是可以更改的。就出现了指针常量(pointer to const) 和 常量指针(const pointer)。汉字理解起来没有英文来的准确，所以下面不用常量指针和指针常量来表述。
pointer to const 很明显是指向的对象是个常量，而指针不能够修改这个对象的值。
const pointer 很明显就是这个指针是个常量，只能指向这个固定的内存，但是可以通过其修改对象的值。
在定义上如下：
int a; // pointer to const const int *p1 = &amp;amp;a; // 等同于 int const *p = &amp;amp;a; // const pointer int *const p2 = &amp;amp;a; 所以可以看出来，const修饰的就是紧跟其后的内容，在pointer to const的定义中可以认为*p 指代指向的对象；而const pointer中const修饰的是p；</description>
    </item>
    
    <item>
      <title>C&#43;&#43; OOP--函数解析过程</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-2/</link>
      <pubDate>Tue, 30 May 2017 00:58:59 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-2/</guid>
      <description>类的作用域 # 名称查找优先，对于编译器来说，优先寻找名称一致的函数，再关心类型的问题。
编译器在进行名称查找的顺序: 直接类定义 -&amp;gt; 父类定义 -&amp;gt; 祖宗类定义。但是，搜索顺序是按照静态类型开始的，结合上面的动态绑定，如果你的指针类型是父类，那么即使实体是个子类也不会在子类域中搜索，直接从父类开始搜索，因为编译阶段无法做动态绑定。
隐藏&amp;amp;重载&amp;amp;覆盖 # 这个概念刚开始学C++的人可能会比较迷。
隐藏 # 隐藏是在继承中出现的概念。基类与派生类有一个同名函数，则无论是否参数类型一致，基类的函数都会被隐藏掉。这个隐藏的意思，与Java中的override是否一致，我觉得不一致，但是效果一致。因为编译器在搜索名字的时候首先搜索派生类的函数，然后看参数，如果参数类型对的上就调用，对不上就报错。所以根本调用不到基类的函数，实现了隐藏。但是，C++中基类的函数还是存在的，Java中是直接将父类的函数段重写，父类的函数完全从代码段消失了。 既然还存在，就意味着可以访问。使用using关键字调用函数可以直接调用基类被隐藏的函数，可以说using改变了编译器名字查找的顺序。
对于虚函数，我们要求参数类型必须一致，就是这个原因。要实现动态绑定就必须使得当查找到函数名时，此函数可以被调用，而不是报个错说参数不一致。
这个规则是可以类推出来的，从命名上我们就可以窥探出这个东西有什么特质。
比如作为成员函数，就是可以被隐藏，无论是虚函数还是普通函数都是可以的。虚函数可以被普通函数隐藏，普通函数也可以被虚函数隐藏，其他一些概念一样可以用命名来推导出来。
重载 # 重载是对于函数来说的，与类间继承没有关系。对于一个普通函数，即不存在任何的类中的独立函数，重载的概念很清晰，就是相同的函数名，不同的参数列表；
对于成员函数来说，在同一个类中，可以重载，重载的概念也是一样的。
覆盖 # 覆盖与上面的东西又不一样，但是这个不是C++中的重点概念。覆盖是对于基类的虚函数来说的，派生类写一个名称、参数类型完全相同的函数，可以实现覆盖，其实就是虚函数的那一套东西。
只要分清楚，隐藏和覆盖是在父子间作用的，重载是同级内作用的就可以了。
那么有一个问题，很恶心，哈。 就是基类的虚函数被重载了，有很多个版本，子类在覆盖的时候，可以选择覆盖哪个版本。一样是使用using修饰符来将基类的函数作用域同步到当前作用域上来，这样只有对需要覆盖的版本进行覆盖就行了，其他的就使用基类的实现。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; OOP基础--动态绑定</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-1/</link>
      <pubDate>Mon, 29 May 2017 19:10:17 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/c-oop-1/</guid>
      <description>面向对象其实就是那样，都差不多，不一样就是关键字还有一些奇怪的机制问题，总的来说实现的东西都是一样的。
虚函数 # 对应Java的抽象函数。但是略有区别。 虚函数在定义的时候使用关键字virtual来修饰声明，但是不一定是没有实现的，可以指定一个已经是实现的函数为虚函数。虚函数最主要的定义是使得每个继承他的子类都实现自己的版本。并且虚函数是实现C++动态绑定的关键。 虚函数只能声明在类的内部。
动态绑定 # 所谓动态绑定就是，有些函数并不是在编译的时候就知道要去调用那个函数的，而是在真正运行的时候才能根据变量的类型去调用对应的函数。这个实现就是对于基类的虚函数，子类也实现一个版本（子类在实现的时候不需要指定函数为虚函数，因为继承过来的函数就是虚函数，是可以传递的），这样对于同一个函数就有两个版本，当我在调用的时候使用指针调用或引用调用（注意必须是这两种调用之一的方式才会有动态绑定的效果，其他都是在编译阶段就能够确定下来。）就可以实现动态绑定。
由于虚函数是在执行的时候才调用，所以在编译阶段就有些错误报不出来，比如如果我们没有实现某个子类的虚函数，在调用的时候就没有函数去执行，所以所有的虚函数都必须被定义，而不仅仅是声明，普通的函数只要我们永不到就可以不进行定义。
引用和指针调用 # 所谓引用和指针调用，是指函数中关于虚函数的调用对象是作为引用参数或者是指针参数传进去的，这样就需要根据参数的类型来调用不同版本的虚函数。这里就要说一下基类与派生类之间的类型转化问题，正是因为其二者可以进行类型转化，所以在参数列表中的类型并不能唯一限定参数的类型，才有了虚函数调用时的动态绑定。
类间类型转换 # 子类中有一部分是来自与基类的，这一部分可以被单独利用。也就是说，一个子类，我们也可以把他当作他的某个基类来使用，使用的时候只用到基类的部分。也就是说，我有一个基类的指针，我就可以指向这个子类，此时，指针就操作子类的基类部分。这就是从派生类到基类的类型转换。
反过来就是不行的，可想而知，多的东西可以不要，少了东西就会有问题，所以不存在从基类到派生类的转化。同时我们也就明白了，如果你要对于一个虚函数动态绑定，在调用函数的对象的类型声明的时候就要声明为基类的类型，这样当你传入一个子类的引用的时候，该引用就会转换为子类，进而去调用子类的虚函数实现；如果你写声明的时候声明为了子类的类型，就没有办法动态绑定了，因为反向没有办法转换。
虚函数覆盖 # 子类要实现自己的虚函数版本就要对基类的虚函数进行覆盖，override，又是这个熟悉的东西。覆盖当然就要参数类型完全一样，参数不一样的那是重载，是不同的函数。书上说，一般我们都是要进行覆盖而不是重载，但是有的时候我们会搞错参数列表的顺序等细节，所以，你可以在函数声明的参数列表后加override说明符来告诉编译器，你是要覆盖虚函数的，如果有细节错误就告诉我！
如果你在后面加上了final修饰符，就意味着，这个虚函数不希望再被覆盖了。
关于虚函数的默认参数，不同版本可能会有不同的默认参数值，但是在默认参数的选取上，是依据静态类型决定的，也就是说不能做到动态绑定，调用函数的对象定义成什么类型就用什么默认值。如你调用函数的对象是基类的引用，那么即使你最后执行的是子类的函数，默认值也是基类的默认值，所以这个就会出现隐蔽的问题。所以安全起见，默认参数一致最好。
猜想 # 同时从这里我们也可以窥探出编译器的原理。对于一个函数覆盖来说，函数的默认值必须是在编译阶段就写进机器码中的，尽管你有两个版本的函数，编译器会对两个函数分别编译，但是默认值存储的实现是与函数编译分开的。这里只是猜测，对于函数的默认值，其实编译器可以将其存储在对应的栈位置上，也可以将其转成一个赋值命令存储在函数代码段中，这两种理论上都可以实现默认参数的功能，但是从编译器的定义角度，参数是单独存放在数据段的，而不在代码段，那么在编译的时候就会根据你参数的字面类型进行设定，而无法进行动态绑定。这个应该是C++的一个设计缺陷，最初设计函数编译的时候没有动态一说，就直接写进数据段了，等到出现动态绑定的时候沿用之前的函数处理的方式，就无法实现绑定。（不知道这个思路对不对，以后有时间考证下）。
回避动态绑定 # 除了动态绑定，也可以用作用域操作符来强制执行某一类的虚函数版本。
double ans = C-&amp;gt;Base::Update(); 为什么要回避动态绑定，这与类间设计有关。如果基类与派生类关于虚函数功能设定是：基类虚函数处理通用处理，派生类处理剩余子类相关内容，那么对于真的要完整实现功能的时候就要在派生类的虚函数中先调用一下基类的虚函数，再实现派生类的函数剩余部分，所以这时候就要回避动态绑定。
纯虚函数 # 你的直觉会告诉你这个纯虚函数应该是个只有声明没有定义的函数。没错，这就是纯虚函数，在格式上有一个特点，就是函数声明最后有一个=0标志。这个声明必须在类的内部，并且类内不能对这个函数进行定义，在类外部定义是可以的。
纯虚函数是在一些设计上必要的。比如我们有一个操作，有4个版本，每个版本根据不同的参数值有不同的动作，那么我们会设计一个基类，并在基类中声明这个函数，但是这个函数明显什么都不能做，而是要等到不同的子类根据自己的方案实现这个函数。所以这时候就声明一个纯虚函数就好了。
子类只要正常的覆盖这个函数就可以，如果不覆盖就继续往下传递。
抽象类 # 很熟悉，Java中含有抽象函数的类是抽象类，在这里有纯虚函数的类就是抽象类。并没有什么修饰符，就是个类。
继承中的友元 # 友元不可继承、不可传递。 派生类的友元不可访问基类中的非公有成员。 </description>
    </item>
    
    <item>
      <title>OOP中的-控制修饰符</title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/accessmodifier/</link>
      <pubDate>Sat, 27 May 2017 15:55:04 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/accessmodifier/</guid>
      <description>面向对象编程(Object-Oriented Programming)中,最初开始接触到的就是访问控制修饰符。访问控制修饰是几乎所有的OOP语言都会涉及到的，下面就整理三个我熟悉的语言。
C/C++ # 更详细的内容可以参考《C++ primer》-类 这一章。
概述 # 有三种修饰符，分别：private、public、protected。其中最后一个protected是在继承出现以后才有效的。对于无论是成员变量还是成员函数，这些修饰符都具有相同的作用，即访问控制。其设计的主要作用是为了防止封装的类内成员被类的使用者无意更改或误操作，同时，对访问权限的限制可以实现代码间的松耦合。在类内算法做调整的过程中保持使用者可调用的代码接口，只更改私有函数等。 在详述各个控制符之前要讲一下struct 和class的区别。二者都可以用来定义类，唯一的不同就是默认的访问权限不同。struct的第一个修饰符之前定义的成员默认是public的，但是class是默认private的。
private 与 public # 这两个要一起来说，因为二相相生。private就是将控制权限制在类内，只能是类内的函数访问。public完全没有限制。这两个是最容易理解的，也没有什么好说的。
protected # 比上面两个略复杂一点点。在没有继承的情况下，protected与private是一样的，所以protect之所以与private不同在于派生类的访问。其修饰的成员可以被派生类直接访问，但是不被派生类对象访问。这个有些博客写的不太严谨，protected无论什么时候都不能与public一样，也就是类的使用者不能直接访问。 换句话说，派生类可以将其修饰的成员当成自己的亲成员来访问，派生类内部可以用对象实例来访问，但是类外不行。
举个例子：
class Base{ protected: int m; ... } class A : public Base{ public: // Note-1 void Add(A &amp;amp; tmp){ tmp.m += 1; } ... } int main(){ A tmp; // Note-2 int x = tmp.m; return 0; } /* * 其中，Note-1的写法没有问题，但是Note-2的写法就是非法的。 */ friend # 有的时候我们的类成员不能被使用者直接访问，但是我需要让其他的一些非类内成员函数来访问，如重载运算符的时候需要被模板函数访问，所以又有了一个新的控制访问修饰符，这个修饰符只用来修饰一些函数或类的声明，也就是说可以让一些类或函数成为该类的友元，使得其可以访问类内的成员变量和成员函数，不受其他修饰符的限制。
只能修饰非成员函数的声明，或其他类。 只能在类内修饰。 其声明不受其他几个修饰符影响。 友元关系不能传递, 也不可继承。 友元声明，只是声明了访问权限，并没有实际声明，如要使用该函数，仍然需要显示用普通声明再声明一次。 用作继承权限修饰符 # 除了用于成员权限声明，此三个修饰符海可以用来修饰类的继承方式，不同的继承方式使得基类成员在派生类中的权限不同。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/debug/</guid>
      <description> 启动后台进程，top -H -p 可以查看所有的线程 systemd, deamon pstree -a // 进程树 wait waitpid, // 父进程管理子进程 hup 和 nohup pstack 打印堆栈, 是GDB的简单封装，可以参考一下GDB的使用。 LLDB 和 GDB # LLDB 是LLVM工具链中的一个DEBUG工具，和GDB非常相似。
GDB教程：http://c.biancheng.net/view/8191.html 命令差异详情参考：https://lldb.llvm.org/use/map.html LLDB 速查：https://www.jianshu.com/p/4250e4805bb3 o </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/epoll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/epoll/</guid>
      <description>Linux事件驱动机制 # 在本学人机交互课程的时候，用到过一个渲染库，由于需要监听很多组件的点击和键盘事件，主函数中有一个巨大的轮询机制，并且当时还是写的单线程的处理，这当然是十分鸡肋的一种处理方式。
Linux中，事件驱动机制，也称为IO多路复用。是内核实现的一种机制，在内核2.6以后的版本中才有。
在Linux中，一切皆文件，文件即IO。文件、socket通信、进程间通信管道pipe都是IO事件，都使用统一的fd文件描述符(File Descriptor)来表示。
文件描述符 # 每个文件描述符会与一个打开的文件相对应 不同的文件描述符也可能指向同一个文件 相同的文件可以被不同的进程打开，也可以在同一个进程被多次打开 系统为维护文件描述符，建立了三个表:
进程级的文件描述符表 系统级的文件描述符表 文件系统的i-node表 每一个进程都会维护一个fd表，一般一个进程允许打开的最大文件数量是1024。
事件驱动机制 # 应用程序层面的事件通知机制总是绕不过轮询这个天坑，轮询带来的问题至少有三个：
不加限制的for循环必然导致cpu跑满 加了sleep的轮询必然导致一定的拥挤，不必要的等待。 大IO事件的阻塞，影响了后续的事件处理。 Linux在内核层面提供了epoll的机制来实现事件的通知，在没有事件的时候阻塞应用进程。做到CPU的0浪费。具体的实现方式在应用端只需要三个函数。
epoll_create， 创建一个fd池 epollctl，向fd池中注册需要监听的事件 epollwait，等待事件唤醒自己 我们先从整体了解一下epoll的内部实现机制。
内核中epoll的实现机制 # Linux系统的一切皆文件的设计中，为文件对象设计了一个poll回调机制，即当某个fd的读写状态满足的时候，即发生poll回调，将fd相关的数据(epitem)塞入一个队列中，并通知操作系统唤醒应用进程。
由此我们可以知道，当应用进程使用epollctl函数注册了事件以后，调用epollwait函数即可进入实际的睡眠状态，直到操作系统接到poll回调将其唤醒。应用线程没有任何浪费的操作。
此处需要注意一点，虽然Linux中一切皆文件，但是并不是所有的文件对象都具有一致的接口，poll接口就不是都支持的，朴素意义（狭义）的文件系统是不支持的。socket是支持的。所以epoll常用于网络IO的处理中。
代码示例 # 关于socket的知识：
[1]. C/C++ socket编程教程之六：使用listen(),accept(),write(),read()函数 [2]. linux C++ socket编程 实例 int socket(int domain, int type, int protocol); 函数对应一切皆文件的open操作；
AF_INET: IPv4 Internet协议
SOCK_STREAM: TCP字节流
int bind(int sockfd, const struct sockaddr * addr, socklen_t addrlen); 分配一个具体的地址给sockfd
listen() 函数让socket处于监听的状态，此时如果有请求进来，就放入缓冲区，直到缓冲区满；中间调用accept() 函数即可以从缓冲区获取一个请求。listen 非阻塞。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/gccclang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/gccclang/</guid>
      <description>GCC 是 GNU旗下的编译工具集。Clang是基于LLVM的一套C/C++、Object-C/C++ 的一款编译器。LLVM则是一个通用后端，用于优化程序、链接程序、生成代码等。
常用的编译选项说明 # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/rand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/rand/</guid>
      <description>mt19937 # std::mt19937是伪随机数产生器，用于产生高性能的随机数。 C++11引入。返回值为unsigned int。
mt 是Mersenne Twister算法译为马特赛特旋转演算法，是伪随机数发生器之一，其主要作用是生成伪随机数。发明于1997年。
Mersenne Twister有以下优点：随机性好，在计算机上容易实现，占用内存较少(mt19937的C程式码执行仅需624个字的工作区域)，与其它已使用的伪随机数发生器相比，产生随机数的速度快、周期长，可达到$2^19937-1$，且具有623维均匀分布的性质，对于一般的应用来说，足够大了，序列关联比较小，能通过很多随机性测试。
随机数生成的用法 # 生成5个随机数
#include &amp;lt;iostream&amp;gt; #include &amp;lt;random&amp;gt; using namespace std; int main() { std::mt19937 rng(std::random_device{}()); for (int i = 0; i &amp;lt; 5; i++) { cout &amp;lt;&amp;lt; rng() &amp;lt;&amp;lt; endl; } return 0; } 生成均匀分布的随机数
#include &amp;lt;iostream&amp;gt; #include &amp;lt;random&amp;gt; using namespace std; int main() { std::mt19937 rng(std::random_device{}()); std::uniform_int_distribution&amp;lt;&amp;gt; uni_int(1, 100); for (int i = 0; i &amp;lt; 5; i++) { cout &amp;lt;&amp;lt; uni_int(rng) &amp;lt;&amp;lt; endl; } return 0; } 【参考文献】 # 自研实现 &amp;amp; boost实现：https://blog.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/readme/</guid>
      <description>虽然简单的C++ 会写了，但是对于一些面向对象的设计依然有较大的漏洞。在这里针对漏洞进行修补。
函数拦截替换：https://cloud.tencent.com/developer/article/1478460 C++ 异步： https://chlorie.github.io/ChloroBlog/posts/2020-10-07/0-async.html </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/scopeguard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/scopeguard/</guid>
      <description>C++ 原子事务 # 本文所介绍的ScopeGuard方法来自于Andrei-Alexandrescu 和 Pertu-Marginean在2000年发布的一篇文章。其提出了一种更加安全和优美的原子事物处理机制。
原子事务是指，一个或一组动作，要么全做，要么全不做。在代码中，体现为操作失败时的回滚操作。
比较直观的做法是在代码中引入大量的异常处理。这不仅让代码变得更长而且更加不易扩展，当添加一个新的操作将会引入大量的异常处理代码。
另外一种做法则是遵循“构造时创建资源，析构时清除资源”的原则来实现，需要为每一种操作实现一个单独的操作类，大致如下：
class VectorInserter{ public: VectorInserter(std::vector&amp;amp; v, User&amp;amp; u): container_(v), commit_(false) { container_.push_back(&amp;amp;u); } void Commit() throw(){ commit_ = true; } ~VectorInserter() { if (!commit_) container_.pop_back(); } private: std::vector&amp;amp; container_; bool commit_; }; 你可以这样来使用这个操作类：
void User::AddFriend(User&amp;amp; newFriend) { VectorInserter ins(friends_, &amp;amp;newFriend); pDB_-&amp;gt;AddFriend(GetName(), newFriend.GetName()); // Everything went fine, commit the vector insertion ins.Commit(); } 可以看到，在析构函数中，只有当commit没有被调用的时候，才会进行回滚操作。这样做的好处是，避免编写大量的异常处理代码，一旦操作成功就设置commit为true，否则在析构函数中进行回滚操作。
Scope Guard 的实现方法 # 以上的思路缺点在于需要编写大量的操作类。使用Scope Guard可以写出如下简洁的代码。
void User::AddFriend(User&amp;amp; newFriend) { friends_.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/thread/</guid>
      <description>C++11 提供了线程开发模块，此前都使用pthread，一种C语言的解决方案。但是pthread的使用极其繁琐，导致初初使用pthread在赛场上搞了几个小时还是传不对参数，结果也拿不出来。thread的出现大大的简化了多线程编程。
Thread 的基本用法 # #include&amp;lt;iostream&amp;gt; #include&amp;lt;thread&amp;gt; using namespace std; void say_hi(string s) { cout &amp;lt;&amp;lt; &amp;#34;Hello: &amp;#34; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl; return ; } int main() { string str = &amp;#34;Paladnix&amp;#34;; thread thr(say_hi, str); // 创建线程thr并启动。传入待执行的函数和参数。 cout &amp;lt;&amp;lt; &amp;#34;Others&amp;#34; &amp;lt;&amp;lt; endl; thr.join(); // 阻塞主函数直至thr线程结束退出。 return 0; } 如果主函数没有调用join(), 则主函数可能在thr线程之前结束，会强制结束子线程。输出的结果如下：
Others libc++abi: terminating Hello: Paladnix [1] 39257 abort ./a.out 也可以使用detach() 函数，将thr函数放到后台运行，与主函数的进程解绑。缺点就是thr的输出结果不会再出现在主进程的终端上。
传入成员函数 # 除了可以使用普通函数作为线程的启动函数，也可以用类的成员函数来构造线程。
class Person { string name; int age; public: Person() {} Person(string name, int age):name(name), age(age){} void say_hi(string hi) { cout &amp;lt;&amp;lt; hi &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; this_thread::get_id() &amp;lt;&amp;lt; endl; } }; void test_thread_2() { Person a(&amp;#34;Paladnix&amp;#34;, 18); thread thr(&amp;amp;Person::say_hi, a, &amp;#34;Hi&amp;#34;); thr.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B/</guid>
      <description>由于对指针的深度操作，使得C++程序出现内存问题的风险变得很大。常见的内存问题包括：内存泄漏、重复释放、读写未申请的内存地址、悬挂指针、野指针等。
gcc 自带编译检查 # google的sanitizers工具集提供了这部分编译检查工具，gcc 4.9以上支持。
需要安装libasan的库: sudo yum install libasan
常用的gcc参数如下：
开启内存泄露检查功能：-fsanitize=leak 开启地址越界检查功能：-fsanitize=address 开启越界详细错误信息：-fno-omit-frame-pointer 只有跑到的代码才能检测出，未被执行的代码无法检测。
Valgrind 教程 # 参考：https://blog.csdn.net/tissar/article/details/87194737</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>C++ 智能指针是对普通指针的一种封装，具体的有四类指针， 而不是一种。按照需求使用指针有助于我们提高代码质量。
所有的智能指针都在追求一个东西：RAII(Resource acquisition is initialization), 资源获取即初始化。
scoped_ptr 作用域指针(boost 库) # 正如其名字指出的那样，在作用域结束的时候即自动释放的指针。
scoped_ptr 指针具有一些特殊的要求。
scoped_ptr是noncopyable的，也就是无法复制。 不能作为容器中的元素，因为无法复制。 example # #include &amp;lt;boost/scoped_ptr.hpp&amp;gt; #include &amp;lt;iostream&amp;gt; struct Shoe { ~Shoe() { std::cout &amp;lt;&amp;lt; &amp;#34;Buckle my shoe\n&amp;#34;; } }; class MyClass { boost::scoped_ptr&amp;lt;int&amp;gt; ptr; public: MyClass() : ptr(new int) { *ptr = 0; } int add_one() { return ++*ptr; } }; int main() { boost::scoped_ptr&amp;lt;Shoe&amp;gt; x(new Shoe); MyClass my_instance; std::cout &amp;lt;&amp;lt; my_instance.add_one() &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; std::cout &amp;lt;&amp;lt; my_instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/posts/c&#43;&#43;/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/posts/c&#43;&#43;/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description>使用dtrace 分析程序性能 # 运行程序并采样， &amp;lt;main&amp;gt; 替换为待分析的程序
# 采样到程序结束 sudo dtrace -c &amp;#39;./&amp;lt;main&amp;gt;&amp;#39; -o out.stacks -n &amp;#39;profile-997 /execname == &amp;#34;&amp;lt;main&amp;gt;&amp;#34;/ { @[ustack(100)] = count(); }&amp;#39; # 以99Hz的频率, PID是2063的进程为捕获对象, 包括用户态和核心态, 持续60s sudo dtrace -x ustackframes=100 -n &amp;#39;profile-99 /pid == 2063 &amp;amp;&amp;amp; arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }&amp;#39; -o out.user_stacks dtrace 脚本语法参考：https://docs.oracle.com/cd/E24847_01/html/E22192/gbwaz.html#scrolltoc
生成火焰图 # 1. git clone https://github.com/brendangregg/FlameGraph 2. ./stackcollapse.pl &amp;lt;out.stacks&amp;gt; | ./flamegraph.pl &amp;gt; ~/Desktop/perf.svg perf 性能分析 # 直接参考这个吧：http://linux.</description>
    </item>
    
  </channel>
</rss>
