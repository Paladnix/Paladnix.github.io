<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paladnix Blog Site</title>
    <link>https://Paladnix.github.io/shark/</link>
    <description>Recent content on Paladnix Blog Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://Paladnix.github.io/shark/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/2.28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/2.28/</guid>
      <description> TODO # 为账户添加权限，细粒度到具体的操作类型。 机器人监听群消息，自动提取TODO消息。接入Task自动提醒。 设置一个enginer页面负责具体文档。 快速进入管理页面的通道。 填表位置使用快速补全的方式优化使用。 logo 引入svg的问题，周末处理，需要自己ps来处理一下。 article 页面的重构工作。 根据用户是否报名过某个课程，是否通过某个lesson来给course卡片定标签。 markdown 渲染文本样式： https://westar.io/blog/rust_web_framework_compare/ eslint + prettier 自动格式处理: https://segmentfault.com/a/1190000020379876 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/algorithm-a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/algorithm-a/</guid>
      <description>写在前面：
此表是知识点分割表，其中一些是在讲题目的时候讲过，但是这些视频没有被挑出来，没有明确他们的核心作用。
无论是用已有的，还是新录制，需要将这些视频与单独的题解视频区分开。这些视频需要强对应知识点。
Lesson - 1 枚举基础 # 算法复杂度：$O(n)$, $O(n^2), $$O(\sqrt n)$, $O(log_2 n)$等。 (应当放在语言班)一些名词解释：序列、子序列、子段、子串、排列、矩阵、子矩阵、公共序列、上升、非升、区间。 Lesson - 2 枚举优化 # 本节只能就题论题。题解
lesson - 前缀和 # 容斥思想 前缀和的写法与注意事项。 题解 lesson - 二分法 # 二分法模版，算法复杂度计算 二分查找库函数(lower_bound)：数组版，vector版。 二分答案的适用范围、模版写法、复杂度分析。选一个典型题讲解。 lesson - 动态规划 # 以题为中心，解释单向依赖、重叠子问题，最优子结构，无后效性。 以题为中心，解释动态规划的状态，状态转移，初始化。 lesson - 树结构 # 邻接矩阵和邻接表 有根树与无根树：DFS遍历 二叉树的前中后序 lesson - 图 # 有向图与无向图：存储 BFS 遍历图 拓扑序、拓扑序模版 优先队列 # STL中优先队列的使用、注意事项 堆结构的原理 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/atcoder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/atcoder/</guid>
      <description>abc231_d 图论判断是否成链</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/mui-v4-to-v5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/mui-v4-to-v5/</guid>
      <description> 关于MUIv4与v5的差异 # v4 与v5在组件上的差异不大，但是组包方式有重大的更改。同时组件的样式注入改为了emotion库。
目前MUI-v5的包有如下几个：(https://mui.com/zh/guides/understand-mui-packages/)
@mui/material， 核心组件库 @mui/system， @mui/base， 是一个unstyled components， 你可以认为material部分的组件是用styled-engine修饰过的base组件。 @mui/styled-engine， 样式设计引擎emotion的封装 @mui/styled-engine-sc， 样式设计引擎，styled-components的封装，与上一条可以按需使用。 @mui/styles, 即将被删除 emotion是system部分默认使用的样式引擎，即官方推荐使用的是@mui/styled-engine。后面介绍emotion的特性。
传统的JSS-in-CSS，
对于用户来说，我们直接接触的部分其实就是@mui/material， 一切都从这个包里获取。
MUI-v5响应式改造 # 响应式改造主要是按照宽度自动调节：字体大小、间距、宽度、排版方向、可见性等。以此实现在不同大小的设备上都有良好的展示效果。
前端代码规范 # emotion # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/test-combination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/test-combination/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/testing-stl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/testing-stl/</guid>
      <description>以下关于vector的说法正确的是：
vector是容器，一个vector内部可以存储不同类型的数据 vector的长度可以动态变化，并非在声明时固定长度。 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/testing2-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/testing2-4/</guid>
      <description>测试的核心思路是测试孩子是否具有阅读理解的能力，是否具有理解概念的能力。介绍一些概念，并对概念描述的问题进行判断，是否理解了概念，区别概念中描述的细节差异。这是学习能力的至关重要的基础能力。
有一类特殊的数字叫做“回文数字”， “回文数字” 是从左向右读和从右向左读一摸一样的数字，例如：11、121、7887 都是“回文数字”; 而 12、988、771都不是&amp;quot;回文数字&amp;quot;。
下面不是回文数字的是：
1001 228 11111 1212 学校的食堂里有2种不同的主食：馒头、米饭；有3种不同的蔬菜：土豆、茄子、青菜，小Y同学每一顿饭要选一种主食和一种蔬菜，请问他有多少种不同的搭配方法。例如：米饭+青菜、米饭+土豆是两种不同的搭配方法。
定义一种新的运算符: $\odot$, 运算规则如下：$a \odot b = aab$, 例如：$32 \odot 4 = 32324$， 即将a部分复制2遍和b拼接在一起。请你写下$(33 \odot 54$ 的结果。
4年级
定义一种新的运算符: $\odot$, 运算规则如下：$a \odot b = aab$, 例如：$32 \odot 4 = 32324$， 即将a部分复制2遍和b拼接在一起。请你写下$(2 \odot 1) \odot 5$ 的结果。
找规律
请你找出下面的规律，并写出接下来的数字：$1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, ___$
中位数是指在一些数字中大小处于中间位置的数字。例如：$3，5, 3, 9, 23$ 的中位数是 $5$。请你写出下列数字中的中位数：$10, 2, 13, 12, 2, 5, 1, 99, 75$。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/week_11.8-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/week_11.8-12/</guid>
      <description> 11 月第二周Daily Mark # 开发红线（高危，需注明，等回复）：
后台改动API层的参数、方法、路径、返回数据类型等。 后台改动基础架构代码：redisTableBase 前段改动基础组件代码：libs/ 开发报备：
改动已有的文件 开发日报包括 # git log &amp;ndash;state， 中所有修改的文件列表。 结果截图 测试记录 简要说明代码结构和设计逻辑，重用了哪些代码模块，新建了哪些代码模块。 工作会议 # 文档工作大于代码工作。以最小单元行进。
笔试题目 # 以下代码的复杂度是：
for(int i = 0; i &amp;lt; n; i++) { for(int j = 0; j &amp;lt; n; j++) { continue; } } for(int i = 0; i &amp;lt; n; i++) { for(int j = 0; j &amp;lt; n; j++){ break; } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://Paladnix.github.io/shark/work-record/2022-q4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Paladnix.github.io/shark/work-record/2022-q4/</guid>
      <description> 第四季度 # 以应用易用性为基础做工作，简化工作操作流程。
优化微信群通知类消息的展示形式，转化为图片形式：代码、题解等。 权限角色系统接入细化到操作级别。 答题的步进式提示。 教师统计类信息快速获取。 用户行为判断、监控、提醒。 同学博客建设。 页面聊天室打通微信，接入自动答疑机器人自动处理。 数据文件提取ID仅提取前缀/后缀，如果没有就默认是大数据。 技术演进 # 网站做区域隔离，对外供给学校、机构等。 </description>
    </item>
    
  </channel>
</rss>
